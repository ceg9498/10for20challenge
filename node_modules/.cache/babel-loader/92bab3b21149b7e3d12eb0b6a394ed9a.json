{"ast":null,"code":"function initIDB(dbName,dbVersion,objectStoreNames){return new Promise(function(resolve,reject){// dbName will be the DB name, storeName will be the store name.\nif(!('indexedDB'in window)){console.warn(\"This browser doesn't support IndexedDB\");return;}// create or open IndexedDB\nvar request=window.indexedDB.open(dbName,dbVersion);// handle errors\nrequest.onerror=function(event){console.error(\"IndexedDB Error: \",request.error);reject(\"Failed to open database\");};// handle db upgrades\nrequest.onupgradeneeded=function(event){// save the IDBDatabase interface\nvar db=event.target.result;var successCount=0;// Create an objectStore for the database\nobjectStoreNames.forEach(function(name,index){updgradeDB(db,name).then(function(){successCount++;}).catch(function(message){console.error(message);}).finally(function(){if(index+1===objectStoreNames.length){console.log(\"Reached end of foreach:\",index+1,objectStoreNames.length);if(objectStoreNames.length===successCount){resolve(\"Database access granted\");}else{reject(\"Database access rejected\");}}});});};request.onsuccess=function(event){var curVer=event.target.result.version;if(curVer===dbVersion){resolve('success');}};});}function updgradeDB(db,name){return new Promise(function(resolve,reject){var store=db.createObjectStore(name,{keyPath:'id',autoIncrement:true});store.onerror=function(){console.error(\"store not created, error: \",store.error);reject(\"Failed to open database\");};store.onsuccess=function(){resolve(\"Store \".concat(name,\" created successfully\"));};});}function getAll(dbName,dbVersion,objectStoreName){return new Promise(function(resolve,reject){var request=window.indexedDB.open(dbName,dbVersion);request.onsuccess=function(event){var db=request.result;var transaction=db.transaction(objectStoreName,'readwrite');var store=transaction.objectStore(objectStoreName);var objStoreReq=store.getAll();objStoreReq.onsuccess=function(event){resolve(event.target.result);};objStoreReq.onerror=function(event){reject(\"Unable to get data\");};transaction.onerror=function(event){reject(\"Unable to get data\");};};request.onerror=function(event){reject(\"Unable to get data\");};});}function getOne(dbName,dbVersion,objectStoreName,id){return new Promise(function(resolve,reject){var request=window.indexedDB.open(dbName,dbVersion);request.onsuccess=function(event){var db=request.result;var transaction=db.transaction(objectStoreName,'readwrite');var store=transaction.objectStore(objectStoreName);var objStoreReq=store.get(id);objStoreReq.onsuccess=function(event){resolve(event.target.result);};objStoreReq.onerror=function(event){reject(\"Unable to get data\");};transaction.onerror=function(event){reject(\"Unable to get data\");};};request.onerror=function(event){reject(\"Unable to get data\");};});}function addOrUpdateMany(dbName,dbVersion,objectStoreName,items){return new Promise(function(resolve,reject){var request=window.indexedDB.open(dbName,dbVersion);request.onsuccess=function(event){var db=request.result;var transaction=db.transaction(objectStoreName,'readwrite');var store=transaction.objectStore(objectStoreName);var objStoreReq;items.forEach(function(item){objStoreReq=store.put(item);objStoreReq.onerror=function(event){reject(\"Error storing item \"+item);};});transaction.oncomplete=function(event){resolve(\"Data saved successfully\");};transaction.onerror=function(event){reject(\"Failed to save data\");};};request.onerror=function(event){reject(\"Failed to save data\");};});}function addOrUpdateOne(dbName,dbVersion,objectStoreName,item){return new Promise(function(resolve,reject){var request=window.indexedDB.open(dbName,dbVersion);request.onsuccess=function(event){var db=request.result;var transaction=db.transaction(objectStoreName,'readwrite');var store=transaction.objectStore(objectStoreName);store.put(item);transaction.oncomplete=function(event){resolve(\"Data saved successfully\");};transaction.onerror=function(event){reject(\"Failed to save data\");};};request.onerror=function(event){reject(\"Failed to save data\");};});}function deleteOne(dbName,dbVersion,objectStoreName,id){return new Promise(function(resolve,reject){var request=window.indexedDB.open(dbName,dbVersion);request.onsuccess=function(event){var db=request.result;var transaction=db.transaction(objectStoreName,'readwrite');var store=transaction.objectStore(objectStoreName);var objStoreReq=store.delete(id);objStoreReq.onsuccess=function(event){resolve(\"Item was deleted\");};objStoreReq.onerror=function(event){reject(\"Unable to delete entry\");};transaction.onerror=function(event){reject(\"Unable to delete entry\");};};request.onerror=function(event){reject(\"Unable to delete entry\");};});}function deleteAll(dbName,dbVersion,objectStoreNames){return new Promise(function(resolve,reject){var request=window.indexedDB.open(dbName,dbVersion);request.onsuccess=function(event){var db=request.result;objectStoreNames.forEach(function(name){var transaction=db.transaction(name,'readwrite');var store=transaction.objectStore(name);var objStoreReq=store.clear();objStoreReq.onsuccess=function(event){var message=\"Data has been successfully deleted\";resolve(message);};objStoreReq.onerror=function(event){reject(\"Unable to delete data\");};transaction.onerror=function(event){reject(\"Unable to delete data\");};});};request.onerror=function(event){reject(\"Unable to delete data\");};});}var iDB={init:initIDB,getAll:getAll,getOne:getOne,addOrUpdateMany:addOrUpdateMany,addOrUpdateOne:addOrUpdateOne,deleteOne:deleteOne,deleteAll:deleteAll};export default iDB;","map":{"version":3,"sources":["C:/Users/ceg94/Development/10for20challenge/src/data/indexedDb.ts"],"names":["initIDB","dbName","dbVersion","objectStoreNames","Promise","resolve","reject","window","console","warn","request","indexedDB","open","onerror","event","error","onupgradeneeded","db","target","result","successCount","forEach","name","index","updgradeDB","then","catch","message","finally","length","log","onsuccess","curVer","version","store","createObjectStore","keyPath","autoIncrement","getAll","objectStoreName","transaction","objectStore","objStoreReq","getOne","id","get","addOrUpdateMany","items","item","put","oncomplete","addOrUpdateOne","deleteOne","delete","deleteAll","clear","iDB","init"],"mappings":"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","sourcesContent":["\r\nfunction initIDB(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=> {\r\n    // dbName will be the DB name, storeName will be the store name.\r\n    if(!('indexedDB' in window)){\r\n      console.warn(\"This browser doesn't support IndexedDB\");\r\n      return;\r\n    }\r\n    // create or open IndexedDB\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    // handle errors\r\n    request.onerror = function(event:any){\r\n      console.error(\"IndexedDB Error: \", request.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n\r\n    // handle db upgrades\r\n    request.onupgradeneeded = function(event:any) {\r\n      // save the IDBDatabase interface\r\n      let db = event.target.result;\r\n      let successCount = 0;\r\n      // Create an objectStore for the database\r\n      objectStoreNames.forEach((name, index)=>{\r\n        updgradeDB(db, name).then(()=>{\r\n          successCount++;\r\n        }).catch((message)=>{\r\n          console.error(message);\r\n        }).finally(()=>{\r\n          if(index+1 === objectStoreNames.length){\r\n            console.log(\"Reached end of foreach:\",index+1, objectStoreNames.length)\r\n            if(objectStoreNames.length === successCount){\r\n              resolve(\"Database access granted\");\r\n            } else {\r\n              reject(\"Database access rejected\");\r\n            }\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let curVer = event.target.result.version;\r\n      if(curVer === dbVersion){\r\n        resolve('success');\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction updgradeDB(db:any, name:string){\r\n  return new Promise((resolve, reject)=>{\r\n    let store = db.createObjectStore(\r\n      name,\r\n      {keyPath:'id',autoIncrement:true}\r\n    );\r\n\r\n    store.onerror = () => {\r\n      console.error(\"store not created, error: \",store.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n    store.onsuccess = () =>{\r\n      resolve(`Store ${name} created successfully`);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getAll(dbName:string, dbVersion:number, objectStoreName:string):Promise<object[]|string>{\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.getAll();\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction getOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.get(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateMany(dbName:string, dbVersion:number, objectStoreName:string, items:any[]) {\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq;\r\n      items.forEach((item:any) => {\r\n        objStoreReq = store.put(item);\r\n        \r\n        objStoreReq.onerror = function(event) {\r\n          reject(\"Error storing item \"+item);\r\n        };\r\n      });\r\n\r\n      transaction.oncomplete = function(event) {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateOne(dbName:string, dbVersion:number, objectStoreName:string, item:any){\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      store.put(item);\r\n\r\n      transaction.oncomplete = (event:any) => {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.delete(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(\"Item was deleted\");\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete entry\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteAll(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n\r\n      objectStoreNames.forEach((name)=>{\r\n        let transaction = db.transaction(name, 'readwrite');\r\n        let store = transaction.objectStore(name);\r\n        let objStoreReq = store.clear();\r\n  \r\n        objStoreReq.onsuccess = (event:any) => {\r\n          let message = \"Data has been successfully deleted\";\r\n          resolve(message);\r\n        };\r\n  \r\n        objStoreReq.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n\r\n        transaction.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n      });\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete data\");\r\n    };\r\n  });\r\n}\r\nlet iDB = {\r\n  init: initIDB,\r\n  getAll: getAll,\r\n  getOne: getOne,\r\n  addOrUpdateMany: addOrUpdateMany, \r\n  addOrUpdateOne: addOrUpdateOne, \r\n  deleteOne: deleteOne, \r\n  deleteAll: deleteAll\r\n};\r\nexport default iDB;"]},"metadata":{},"sourceType":"module"}