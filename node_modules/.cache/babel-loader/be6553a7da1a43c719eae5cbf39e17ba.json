{"ast":null,"code":"function initIDB(dbName, dbVersion, objectStoreNames) {\n  return new Promise((resolve, reject) => {\n    // dbName will be the DB name, storeName will be the store name.\n    if (!('indexedDB' in window)) {\n      console.warn(\"This browser doesn't support IndexedDB\");\n      return;\n    } // create or open IndexedDB\n\n\n    var request = window.indexedDB.open(dbName, dbVersion); // handle errors\n\n    request.onerror = function (event) {\n      console.error(\"IndexedDB Error: \", request.error);\n      reject(\"Failed to open database\");\n    }; // handle db upgrades\n\n\n    request.onupgradeneeded = function (event) {\n      // save the IDBDatabase interface\n      var db = event.target.result;\n      let successCount = 0; // Create an objectStore for the database\n\n      objectStoreNames.forEach(name => {\n        updgradeDB(db, name).then(() => {\n          successCount++;\n        }).catch(message => {\n          console.error(message);\n        });\n      });\n\n      if (successCount === objectStoreNames.length) {\n        resolve(\"Database access granted\");\n      } else {\n        reject(\"Database access rejected\");\n      }\n    };\n\n    request.onsuccess = event => {\n      if (!request.onupgradeneeded) {\n        resolve('success');\n      }\n    };\n  });\n}\n\nfunction updgradeDB(db, name) {\n  return new Promise((resolve, reject) => {\n    var store = db.createObjectStore(name, {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n\n    store.onerror = () => {\n      console.error(\"store not created, error: \", store.error);\n      reject(\"Failed to open database\");\n    };\n\n    store.onsuccess = () => {\n      resolve(`Store ${name} created successfully`);\n    };\n  });\n}\n\nfunction getAll(dbName, dbVersion, objectStoreName) {\n  return new Promise((resolve, reject) => {\n    var request = window.indexedDB.open(dbName, dbVersion);\n\n    request.onsuccess = event => {\n      let db = request.result;\n      var transaction = db.transaction(dbName, 'readwrite');\n      let store = transaction.objectStore(objectStoreName);\n      let objStoreReq = store.getAll();\n\n      objStoreReq.onsuccess = event => {\n        resolve(event.target.result);\n      };\n\n      objStoreReq.onerror = event => {\n        reject(\"Unable to get data\");\n      };\n\n      transaction.onerror = event => {\n        reject(\"Unable to get data\");\n      };\n    };\n\n    request.onerror = event => {\n      reject(\"Unable to get data\");\n    };\n  });\n}\n\nfunction getOne(dbName, dbVersion, objectStoreName, id) {\n  return new Promise((resolve, reject) => {\n    var request = window.indexedDB.open(dbName, dbVersion);\n\n    request.onsuccess = event => {\n      let db = request.result;\n      var transaction = db.transaction(dbName, 'readwrite');\n      let store = transaction.objectStore(objectStoreName);\n      let objStoreReq = store.get(id);\n\n      objStoreReq.onsuccess = event => {\n        resolve(event.target.result);\n      };\n\n      objStoreReq.onerror = event => {\n        reject(\"Unable to get data\");\n      };\n\n      transaction.onerror = event => {\n        reject(\"Unable to get data\");\n      };\n    };\n\n    request.onerror = event => {\n      reject(\"Unable to get data\");\n    };\n  });\n}\n\nfunction addOrUpdateMany(dbName, dbVersion, objectStoreName, items) {\n  return new Promise((resolve, reject) => {\n    console.log(\"start add/update many\");\n    var request = window.indexedDB.open(dbName, dbVersion);\n\n    request.onsuccess = event => {\n      let db = request.result;\n      var transaction = db.transaction(dbName, 'readwrite');\n      var store = transaction.objectStore(objectStoreName);\n      var objStoreReq;\n      items.forEach(item => {\n        delete item.countdown;\n        objStoreReq = store.put(item);\n\n        objStoreReq.onerror = function (event) {\n          reject(\"Error storing item \" + item);\n        };\n      });\n\n      transaction.oncomplete = function (event) {\n        resolve(\"Data saved successfully\");\n      };\n\n      transaction.onerror = event => {\n        reject(\"Failed to save data\");\n      };\n    };\n\n    request.onerror = event => {\n      reject(\"Failed to save data\");\n    };\n  });\n}\n\nfunction addOrUpdateOne(dbName, dbVersion, objectStoreName, item) {\n  return new Promise((resolve, reject) => {\n    var request = window.indexedDB.open(dbName, dbVersion);\n\n    request.onsuccess = event => {\n      let db = request.result;\n      var transaction = db.transaction(dbName, 'readwrite');\n      var store = transaction.objectStore(objectStoreName);\n      store.put(item);\n\n      transaction.oncomplete = event => {\n        resolve(\"Data saved successfully\");\n      };\n\n      transaction.onerror = event => {\n        reject(\"Failed to save data\");\n      };\n    };\n\n    request.onerror = event => {\n      reject(\"Failed to save data\");\n    };\n  });\n}\n\nfunction deleteOne(dbName, dbVersion, objectStoreName, id) {\n  return new Promise((resolve, reject) => {\n    var request = window.indexedDB.open(dbName, dbVersion);\n\n    request.onsuccess = event => {\n      let db = request.result;\n      var transaction = db.transaction(dbName, 'readwrite');\n      let store = transaction.objectStore(objectStoreName);\n      let objStoreReq = store.delete(id);\n\n      objStoreReq.onsuccess = event => {\n        resolve(\"Item was deleted\");\n      };\n\n      objStoreReq.onerror = event => {\n        reject(\"Unable to delete entry\");\n      };\n\n      transaction.onerror = event => {\n        reject(\"Unable to delete entry\");\n      };\n    };\n\n    request.onerror = event => {\n      reject(\"Unable to delete entry\");\n    };\n  });\n}\n\nfunction deleteAll(dbName, dbVersion, objectStoreNames) {\n  return new Promise((resolve, reject) => {\n    var request = window.indexedDB.open(dbName, dbVersion);\n\n    request.onsuccess = event => {\n      let db = request.result;\n      var transaction = db.transaction(dbName, 'readwrite');\n      objectStoreNames.forEach(name => {\n        let store = transaction.objectStore(name);\n        let objStoreReq = store.clear();\n\n        objStoreReq.onsuccess = event => {\n          let message = \"Data has been successfully deleted\";\n          resolve(message);\n        };\n\n        objStoreReq.onerror = event => {\n          reject(\"Unable to delete data\");\n        };\n      });\n\n      transaction.onerror = event => {\n        reject(\"Unable to delete data\");\n      };\n    };\n\n    request.onerror = event => {\n      reject(\"Unable to delete data\");\n    };\n  });\n}\n\nlet iDB = {\n  init: initIDB,\n  getAll: getAll,\n  getOne: getOne,\n  addOrUpdateMany: addOrUpdateMany,\n  addOrUpdateOne: addOrUpdateOne,\n  deleteOne: deleteOne,\n  deleteAll: deleteAll\n};\nexport default iDB;","map":{"version":3,"sources":["C:/Users/ceg94/Development/10for20challenge/src/data/indexedDb.ts"],"names":["initIDB","dbName","dbVersion","objectStoreNames","Promise","resolve","reject","window","console","warn","request","indexedDB","open","onerror","event","error","onupgradeneeded","db","target","result","successCount","forEach","name","updgradeDB","then","catch","message","length","onsuccess","store","createObjectStore","keyPath","autoIncrement","getAll","objectStoreName","transaction","objectStore","objStoreReq","getOne","id","get","addOrUpdateMany","items","log","item","countdown","put","oncomplete","addOrUpdateOne","deleteOne","delete","deleteAll","clear","iDB","init"],"mappings":"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","sourcesContent":["\r\nfunction initIDB(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=> {\r\n    // dbName will be the DB name, storeName will be the store name.\r\n    if(!('indexedDB' in window)){\r\n      console.warn(\"This browser doesn't support IndexedDB\");\r\n      return;\r\n    }\r\n    // create or open IndexedDB\r\n    var request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    // handle errors\r\n    request.onerror = function(event:any){\r\n      console.error(\"IndexedDB Error: \", request.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n\r\n    // handle db upgrades\r\n    request.onupgradeneeded = function(event:any) {\r\n      // save the IDBDatabase interface\r\n      var db = event.target.result;\r\n      let successCount = 0;\r\n      // Create an objectStore for the database\r\n      objectStoreNames.forEach((name)=>{\r\n        updgradeDB(db, name).then(()=>{\r\n          successCount++;\r\n        }).catch((message)=>{\r\n          console.error(message);\r\n        });\r\n      });\r\n      if(successCount === objectStoreNames.length){\r\n        resolve(\"Database access granted\");\r\n      } else {\r\n        reject(\"Database access rejected\");\r\n      }\r\n    };\r\n\r\n    request.onsuccess = (event:any) => {\r\n      if(!request.onupgradeneeded){\r\n        resolve('success');\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction updgradeDB(db:any, name:string){\r\n  return new Promise((resolve, reject)=>{\r\n    var store = db.createObjectStore(\r\n      name,\r\n      {keyPath:'id',autoIncrement:true}\r\n    );\r\n\r\n    store.onerror = () => {\r\n      console.error(\"store not created, error: \",store.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n    store.onsuccess = () =>{\r\n      resolve(`Store ${name} created successfully`);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getAll(dbName:string, dbVersion:number, objectStoreName:string){\r\n  return new Promise((resolve, reject)=>{\r\n    var request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction(dbName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.getAll();\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction getOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve, reject)=>{\r\n    var request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction(dbName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.get(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateMany(dbName:string, dbVersion:number, objectStoreName:string, items:any[]) {\r\n  return new Promise((resolve,reject) => {\r\n    console.log(\"start add/update many\")\r\n    var request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction(dbName, 'readwrite');\r\n      var store = transaction.objectStore(objectStoreName);\r\n      var objStoreReq;\r\n      items.forEach((item:any) => {\r\n        delete item.countdown;\r\n        objStoreReq = store.put(item);\r\n        \r\n        objStoreReq.onerror = function(event) {\r\n          reject(\"Error storing item \"+item);\r\n        };\r\n      });\r\n\r\n      transaction.oncomplete = function(event) {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateOne(dbName:string, dbVersion:number, objectStoreName:string, item:any){\r\n  return new Promise((resolve,reject) => {\r\n    var request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction(dbName, 'readwrite');\r\n      var store = transaction.objectStore(objectStoreName);\r\n      store.put(item);\r\n\r\n      transaction.oncomplete = (event:any) => {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve,reject)=>{\r\n    var request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction(dbName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.delete(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(\"Item was deleted\");\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete entry\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteAll(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=>{\r\n    var request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      var transaction = db.transaction(dbName, 'readwrite');\r\n\r\n      objectStoreNames.forEach((name)=>{\r\n        let store = transaction.objectStore(name);\r\n        let objStoreReq = store.clear();\r\n  \r\n        objStoreReq.onsuccess = (event:any) => {\r\n          let message = \"Data has been successfully deleted\";\r\n          resolve(message);\r\n        };\r\n  \r\n        objStoreReq.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n      })\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to delete data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete data\");\r\n    };\r\n  });\r\n}\r\nlet iDB = {\r\n  init: initIDB,\r\n  getAll: getAll,\r\n  getOne: getOne,\r\n  addOrUpdateMany: addOrUpdateMany, \r\n  addOrUpdateOne: addOrUpdateOne, \r\n  deleteOne: deleteOne, \r\n  deleteAll: deleteAll\r\n};\r\nexport default iDB;"]},"metadata":{},"sourceType":"module"}