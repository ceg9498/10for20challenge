{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ceg94\\\\Development\\\\10for20challenge\\\\src\\\\App.tsx\";\nimport React from 'react';\nimport Navigation from './components/Nav';\nimport Settings from './components/Settings';\nimport Home from './components/Home';\nimport Chart from './components/Chart';\nimport iDB from './data/indexedDb';\nlet dbName = \"10for20\";\nlet store = {\n  tasks: \"tasks\",\n  entries: \"entries\"\n};\nconst DB_VER = 1;\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      section: \"home\",\n      tasks: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\n      entries: []\n    };\n    this.setSection = this.setSection.bind(this);\n    this.updateTasks = this.updateTasks.bind(this);\n    this.addEntry = this.addEntry.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"componentDidMount\");\n    iDB.init(dbName, DB_VER, [store.tasks, store.entries]).then(message => {\n      console.log(message);\n      iDB.getAll(dbName, DB_VER, store.tasks).then(res => {\n        console.log(res);\n        this.setState({\n          tasks: res.tasks\n        });\n        iDB.getAll(dbName, DB_VER, store.entries).then(entries => {\n          console.log(entries);\n\n          if (Array.isArray(entries)) {\n            this.setState({\n              entries: entries\n            });\n          }\n        }).catch(message => {\n          console.error(message);\n        });\n      }).catch(message => {\n        console.error(message);\n      });\n    }).catch(message => {\n      console.error(message);\n    }).finally(() => {\n      console.log(\"callback hell is over.\");\n    });\n  }\n\n  setSection(section) {\n    this.setState({\n      section: section\n    });\n  }\n\n  updateTasks(tasks) {\n    this.setState({\n      tasks: tasks\n    });\n    iDB.addOrUpdateOne(dbName, DB_VER, store.tasks, {\n      id: 1,\n      tasks: tasks\n    }).then(message => {\n      console.log(message);\n    }).catch(message => {\n      console.error(message);\n    });\n  }\n\n  addEntry(entry) {\n    entry.id = new Date().valueOf();\n    let entries = this.state.entries;\n    entries.push(entry);\n    this.setState({\n      entries: entries\n    });\n    iDB.addOrUpdateOne(dbName, DB_VER, store.entries, entry).then(message => {\n      console.log(message);\n    }).catch(message => {\n      console.error(message);\n    });\n  }\n\n  render() {\n    console.log(this.state);\n    return React.createElement(React.Fragment, null, React.createElement(Navigation, {\n      current: \"Current\",\n      bg: \"light\",\n      textTheme: \"light\",\n      setSection: this.setSection,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }), this.state.section === \"home\" && React.createElement(Home, {\n      style: pageBg,\n      tasks: this.state.tasks,\n      updateTasks: this.updateTasks,\n      updateEntries: this.addEntry,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), this.state.section === \"chart\" && React.createElement(Chart, {\n      style: pageBg,\n      tasks: this.state.tasks,\n      entries: this.state.entries,\n      updateTasks: this.updateTasks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }), this.state.section === \"settings\" && React.createElement(Settings, {\n      style: pageBg,\n      tasks: this.state.tasks,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }));\n  }\n\n}\nconst pageBg = {\n  backgroundColor: \"lightgrey\",\n  height: \"100vh\",\n  padding: \"20px\",\n  paddingTop: \"76px\"\n};","map":{"version":3,"sources":["C:/Users/ceg94/Development/10for20challenge/src/App.tsx"],"names":["React","Navigation","Settings","Home","Chart","iDB","dbName","store","tasks","entries","DB_VER","App","Component","constructor","props","state","section","setSection","bind","updateTasks","addEntry","componentDidMount","console","log","init","then","message","getAll","res","setState","Array","isArray","catch","error","finally","addOrUpdateOne","id","entry","Date","valueOf","push","render","pageBg","backgroundColor","height","padding","paddingTop"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Navigation from './components/Nav';\r\nimport Settings from './components/Settings';\r\nimport Home from './components/Home';\r\nimport Chart from './components/Chart';\r\nimport iDB from './data/indexedDb';\r\n\r\nlet dbName = \"10for20\";\r\nlet store = {\r\n  tasks: \"tasks\",\r\n  entries: \"entries\"\r\n};\r\nconst DB_VER = 1;\r\n\r\nexport default class App extends React.Component<any,any> {\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n      section: \"home\",\r\n      tasks: [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"],\r\n      entries: []\r\n    };\r\n    this.setSection = this.setSection.bind(this);\r\n    this.updateTasks = this.updateTasks.bind(this);\r\n    this.addEntry = this.addEntry.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"componentDidMount\")\r\n    iDB.init(dbName, DB_VER, [store.tasks, store.entries])\r\n    .then((message)=>{\r\n      console.log(message);\r\n      iDB.getAll(dbName, DB_VER, store.tasks)\r\n      .then((res)=>{\r\n        console.log(res);\r\n        this.setState({\r\n          tasks: (res as any).tasks\r\n        });\r\n        iDB.getAll(dbName, DB_VER, store.entries)\r\n        .then((entries)=>{\r\n          console.log(entries);\r\n          if(Array.isArray(entries)){\r\n            this.setState({\r\n              entries: entries\r\n            });\r\n          }\r\n        }).catch((message:string)=>{\r\n          console.error(message);\r\n        })\r\n      }).catch((message:string)=>{\r\n        console.error(message);\r\n      });\r\n    }).catch((message:string) => {\r\n      console.error(message);\r\n    }).finally(()=>{\r\n      console.log(\"callback hell is over.\")\r\n    });\r\n  }\r\n\r\n  setSection(section:string) {\r\n    this.setState({\r\n      section:section\r\n    });\r\n  }\r\n\r\n  updateTasks(tasks:any){\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.tasks, {id:1, tasks:tasks})\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  addEntry(entry:any){\r\n    entry.id = new Date().valueOf();\r\n    let entries = this.state.entries;\r\n    entries.push(entry);\r\n    this.setState({\r\n      entries: entries\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.entries, entry)\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  render(){\r\n    console.log(this.state);\r\n    return(\r\n      <>\r\n        <Navigation\r\n          current=\"Current\" \r\n          bg=\"light\" \r\n          textTheme=\"light\"\r\n          setSection={this.setSection} />\r\n        { this.state.section === \"home\" &&\r\n          <Home style={pageBg} tasks={this.state.tasks} updateTasks={this.updateTasks} updateEntries={this.addEntry} />\r\n        }\r\n        { this.state.section === \"chart\" &&\r\n          <Chart style={pageBg} tasks={this.state.tasks} entries={this.state.entries} updateTasks={this.updateTasks} />\r\n        }\r\n        { this.state.section === \"settings\" &&\r\n          <Settings style={pageBg} tasks={this.state.tasks} />\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst pageBg = {\r\n  backgroundColor: \"lightgrey\",\r\n  height: \"100vh\",\r\n  padding: \"20px\",\r\n  paddingTop: \"76px\"\r\n};"]},"metadata":{},"sourceType":"module"}