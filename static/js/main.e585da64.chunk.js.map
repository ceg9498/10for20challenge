{"version":3,"sources":["components/Nav.tsx","components/Color.tsx","components/Settings.tsx","components/EntryForm.tsx","components/TaskForm.tsx","components/Home.tsx","components/charts/helpers.js","components/charts/drawMonth.js","components/Chart.tsx","components/charts/legend.js","data/indexedDb.ts","App.tsx","serviceworker.ts","index.tsx"],"names":["Navigation","props","iconTheme","textTheme","Navbar","bg","variant","fixed","Brand","onClick","setSection","Toggle","aria-controls","Collapse","id","Nav","className","defaultActiveKey","Link","eventKey","icon","faBell","ColorSetter","Form","Control","style","inputStyle","type","value","color","onChange","e","setColor","target","index","width","height","border","borderRadius","padding","Settings","Container","fluid","CardColumns","Card","theme","Header","Title","Body","ListGroup","activeKey","Item","href","as","action","setTheme","Text","active","disabled","singleMonth","setChart","tasks","map","task","key","display","alignItems","colors","noneColor","EntryForm","state","date","Date","getFullYear","getMonth","toString","padStart","getDate","validation","name","preventDefault","this","setState","updateEntries","valueOf","Group","controlId","Row","Col","Label","handleChange","hidden","Button","submitEntry","React","Component","TaskForm","taskRow","marginTop","updateTasks","Home","length","months","Map","fullMonths","drawMonth","entries","helpers","year","getUTCFullYear","month","textColor","max","cellpadding","cellsize","aWidth","svg","d3","append","attr","filtered","filter","entry","getUTCMonth","data","days","res","i","push","forEach","day","entryIndex","findIndex","getUTCDate","defs","gradientMap","text","get","selectAll","enter","d","getUTCDay","dt","weekNum","cDay","setUTCDate","cDate","indexOf","gradient","set","arr","item","monthsArr","Chart","useState","setMonth","setYear","window","innerHeight","filteredTasks","html","legend","legendblock","drawLegend","parseInt","iDB","init","dbName","dbVersion","objectStoreNames","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","onupgradeneeded","db","result","successCount","store","createObjectStore","keyPath","autoIncrement","onsuccess","updgradeDB","then","catch","message","finally","log","version","warn","getAll","objectStoreName","transaction","objStoreReq","objectStore","getOne","addOrUpdateMany","items","put","oncomplete","addOrUpdateOne","deleteOne","delete","deleteAll","clear","App","section","bind","addEntry","Cookies","chart","getData","expires","path","current","pageBg","backgroundColor","lightBG","darkBG","minHeight","paddingTop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+TAMe,SAASA,EAAWC,GACjC,IAAIC,EAAgC,SAApBD,EAAME,UAAuB,QAAU,OACvD,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAIJ,EAAMI,GAAIC,QAASL,EAAME,UAAWI,MAAM,OACpD,kBAACH,EAAA,EAAOI,MAAR,CAAcC,QAAS,kBAAIR,EAAMS,WAAW,UAA5C,qBACA,kBAACN,EAAA,EAAOO,OAAR,CAAeC,gBAAc,qBAC7B,kBAACR,EAAA,EAAOS,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUV,QAAQ,QAAQW,iBAAiB,QACxD,kBAACF,EAAA,EAAIG,KAAL,CAAUT,QAAS,kBAAIR,EAAMS,WAAW,SAASS,SAAS,QAA1D,QACA,kBAACJ,EAAA,EAAIG,KAAL,CAAUT,QAAS,kBAAIR,EAAMS,WAAW,UAAUS,SAAS,SAA3D,SACA,kBAACJ,EAAA,EAAIG,KAAL,CAAUT,QAAS,kBAAIR,EAAMS,WAAW,aAAaS,SAAS,YAA9D,cAGJ,kBAAC,IAAD,CAAiBH,UAAS,eAAUd,GAAakB,KAAMC,O,yCCVtD,SAASC,EAAYrB,GAC1B,OACE,kBAACsB,EAAA,EAAKC,QAAN,CAAcC,MAAOC,EAAYC,KAAK,QAAQC,MAAO3B,EAAM4B,MAAOC,SAAU,SAACC,GAAD,OAAS9B,EAAM+B,SAASD,EAAEE,OAAOL,MAAO3B,EAAMiC,UAI9H,IAQMR,EAAa,CACjBS,MAAO,OACPC,OAAQ,OACRC,OAAQ,kBACRC,aAAc,MACdC,QAAS,OCrBI,SAASC,EAASvC,GAC/B,OACE,kBAACwC,EAAA,EAAD,CAAWC,OAAO,EAAMjB,MAAQxB,EAAMwB,OACpC,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMvC,GAAIJ,EAAM4C,MAAOpB,MAAO,CAACI,MAAuB,SAAhB5B,EAAM4C,MAAmB,QAAU,UACvE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,oBAEF,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACC,EAAA,EAAD,CAAWC,UAAS,WAAMjD,EAAM4C,QAC9B,kBAACI,EAAA,EAAUE,KAAX,CACE7C,QAASL,EAAM4C,MACfO,KAAK,SAASC,GAAG,SAASC,QAAM,EAChC7C,QAAS,kBAAIR,EAAMsD,SAAS,WAH9B,SAIA,kBAACN,EAAA,EAAUE,KAAX,CACE7C,QAASL,EAAM4C,MACfO,KAAK,QAAQC,GAAG,SAASC,QAAM,EAC/B7C,QAAS,kBAAIR,EAAMsD,SAAS,UAH9B,WAON,kBAACX,EAAA,EAAD,CAAMvC,GAAIJ,EAAM4C,MAAOpB,MAAO,CAACI,MAAuB,SAAhB5B,EAAM4C,MAAmB,QAAU,UACvE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,2BAEF,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKY,KAAN,kEACA,kBAACP,EAAA,EAAD,KACE,kBAACA,EAAA,EAAUE,KAAX,CACE7C,QAASL,EAAM4C,MACfS,QAAM,EAACG,QAAM,GAFf,UAGA,kBAACR,EAAA,EAAUE,KAAX,CACE7C,QAASL,EAAM4C,MACfS,QAAM,EAACI,UAAQ,GAFjB,eAMN,kBAACd,EAAA,EAAD,CAAMvC,GAAIJ,EAAM4C,MAAOpB,MAAO,CAACI,MAAuB,SAAhB5B,EAAM4C,MAAmB,QAAU,UACvE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,uBAEF,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACC,EAAA,EAAD,CAAWC,UAAS,WAAMjD,EAAM0D,YAAc,UAAY,WACxD,kBAACV,EAAA,EAAUE,KAAX,CACE7C,QAASL,EAAM4C,MACfO,KAAK,WAAWC,GAAG,SAASC,QAAM,EAClC7C,QAAS,kBAAIR,EAAM2D,SAAS,WAH9B,WAIA,kBAACX,EAAA,EAAUE,KAAX,CACE7C,QAASL,EAAM4C,MACfO,KAAK,UAAUC,GAAG,SAASC,QAAM,EACjC7C,QAAS,kBAAIR,EAAM2D,SAAS,UAH9B,aAON,kBAAChB,EAAA,EAAD,CAAMvC,GAAIJ,EAAM4C,MAAOpB,MAAO,CAACI,MAAuB,SAAhB5B,EAAM4C,MAAmB,QAAU,UACvE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,qBAEF,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACC,EAAA,EAAD,KACGhD,EAAM4D,OAAS5D,EAAM4D,MAAMC,KAAI,SAACC,EAAa7B,GAAd,OAC9B,kBAACe,EAAA,EAAUE,KAAX,CACE7C,QAASL,EAAM4C,MACfmB,IAAG,eAAU9B,GAAST,MAAO,CAACwC,QAAS,OAAQC,WAAY,WAC3D,kBAAC5C,EAAD,CAAaO,MAAO5B,EAAMkE,OAAOjC,GAAQF,SAAU/B,EAAM+B,SAAUE,MAAOA,IAH5E,OAKGA,EAAM,EALT,KAKc6B,MAGhB,kBAACd,EAAA,EAAUE,KAAX,CACI7C,QAASL,EAAM4C,MACfpB,MAAO,CAACwC,QAAS,OAAQC,WAAY,WACvC,kBAAC5C,EAAD,CAAaO,MAAO5B,EAAMmE,UAAWpC,SAAU/B,EAAM+B,SAAUE,OAAQ,IAHzE,qB,4BCvEOmC,E,YACnB,WAAYpE,GAAW,IAAD,8BACpB,4CAAMA,KACDqE,MAAQ,CACXP,KAAM,cACNQ,KAAK,GAAD,QAAK,IAAIC,MAAOC,cAAhB,cAAkC,IAAID,MAAOE,WAAW,GAAGC,WAAWC,SAAS,EAAG,KAAlF,aAA0F,IAAIJ,MAAOK,WACzGC,WAAY,IALM,E,0EAST/C,GAAO,IAAD,EACKA,EAAEE,OAAlB8C,EADW,EACXA,KAAMnD,EADK,EACLA,MACZG,EAAEiD,iBAEU,SAATD,GACDE,KAAKC,SAAS,CACZJ,WAAY,KAIhBG,KAAKC,SAAL,eACGH,EAAOnD,M,oCAKa,KAApBqD,KAAKX,MAAMP,MAAmC,gBAApBkB,KAAKX,MAAMP,KACtCkB,KAAKhF,MAAMkF,cAAc,CAACrE,GAAG,IAAI0D,KAAKS,KAAKX,MAAMC,MAAMa,UAAWb,KAAMU,KAAKX,MAAMC,KAAMR,KAAMkB,KAAKX,MAAMP,OAE1GkB,KAAKC,SAAS,CACZJ,WAAY,6B,+BAKT,IAAD,OACN,OACE,kBAACvD,EAAA,EAAD,KAEE,kBAACA,EAAA,EAAK8D,MAAN,CAAYC,UAAU,aACpB,kBAAC/D,EAAA,EAAKgE,IAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACjE,EAAA,EAAKkE,MAAN,cAEF,kBAACD,EAAA,EAAD,KACE,kBAACjE,EAAA,EAAKC,QAAN,CAAc6B,GAAG,QAAQ1B,KAAK,OAC5BoD,KAAK,OACLnD,MAAOqD,KAAKX,MAAMC,KAClBzC,SAAU,SAACC,GAAD,OAAK,EAAK2D,aAAa3D,SAQzC,kBAACR,EAAA,EAAK8D,MAAN,CAAYC,UAAU,aACpB,kBAAC/D,EAAA,EAAKgE,IAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACjE,EAAA,EAAKkE,MAAN,wBAEF,kBAACD,EAAA,EAAD,KACE,kBAACjE,EAAA,EAAKC,QAAN,CAAc6B,GAAG,SACf0B,KAAK,OACLnD,MAAOqD,KAAKX,MAAMP,KAClBjC,SAAU,SAACC,GAAD,OAAK,EAAK2D,aAAa3D,KAEjC,4BAAQH,MAAM,cAAc8B,UAAQ,EAACiC,QAAM,GAA3C,iBACCV,KAAKhF,MAAM4D,OAASoB,KAAKhF,MAAM4D,MAAMC,KAAI,SAACC,GAAD,MAC/B,KAATA,GACE,4BAAQC,IAAKD,EAAMnC,MAAOmC,GAAOA,SAK3C,kBAACxC,EAAA,EAAKgE,IAAN,KACE,kBAAChE,EAAA,EAAKiC,KAAN,CAAWxC,UAAU,cACjBiE,KAAKX,MAAMQ,cAInB,kBAACc,EAAA,EAAD,CAAQtF,QAAQ,UAAUG,QAAS,kBAAI,EAAKoF,gBAA5C,e,GAjF+BC,IAAMC,WCAxBC,E,YACnB,WAAY/F,GAA8C,IAAD,8BACvD,4CAAMA,KACDqE,MAAQ,CACXT,MAAM,EAAK5D,MAAM4D,OAHoC,E,sEAOhD9B,EAAOG,GACdH,EAAEiD,iBAEF,IAAInB,EAAQoB,KAAKX,MAAMT,MACvBA,EAAM3B,GAASH,EAAEE,OAAOL,MAExBqD,KAAKC,SAAS,CACZrB,MAAOA,M,+BAIF,IAAD,OACN,OACE,kBAACtC,EAAA,EAAD,KACG0D,KAAKX,MAAMT,MAAMC,KAAI,SAACC,EAAa7B,GAAd,OACpB,kBAACX,EAAA,EAAK8D,MAAN,CAAYC,UAAW,QAAUpD,EAAO8B,IAAK,QAAU9B,GACrD,yBAAKT,MAAOwE,GACV,kBAAC1E,EAAA,EAAKkE,MAAN,CAAYhE,MAAO,CAACU,MAAO,OAAQ+D,UAAW,QAAShE,EAAM,EAA7D,KACA,kBAACX,EAAA,EAAKC,QAAN,CAAcG,KAAK,OAAOC,MAAOmC,EAAOjC,SAAU,SAACC,GAAD,OAAS,EAAKD,SAASC,EAAGG,WAIlF,kBAAC0D,EAAA,EAAD,CAAQtF,QAAQ,UAAUG,QAAS,kBAAI,EAAKR,MAAMkG,YAAY,EAAK7B,MAAMT,SAAzE,e,GA9B8BiC,IAAMC,WAoCxCE,EAAU,CACZhC,QAAS,OACTC,WAAY,UCpCC,SAASkC,EAAKnG,GAC3B,IAAI4D,EAAQ5D,EAAM4D,MAClB,OACE,kBAACpB,EAAA,EAAD,CAAWC,OAAO,EAAMjB,MAAQxB,EAAMwB,OACpC,kBAACkB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMvC,GAAIJ,EAAM4C,MAAOpB,MAAO,CAACI,MAAuB,SAAhB5B,EAAM4C,MAAmB,QAAU,UACvE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,sBAEF,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKY,KAAN,iEAGJ,kBAACZ,EAAA,EAAD,CAAMvC,GAAIJ,EAAM4C,MAAOpB,MAAO,CAACI,MAAuB,SAAhB5B,EAAM4C,MAAmB,QAAU,UACvE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,mBAEF,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAAC,EAAD,CAAWa,MAAOA,EAAOsB,cAAelF,EAAMkF,kBAGjDtB,EAAMwC,OAAS,GACd,kBAACzD,EAAA,EAAD,CAAMvC,GAAIJ,EAAM4C,MAAOpB,MAAO,CAACI,MAAuB,SAAhB5B,EAAM4C,MAAmB,QAAU,UACvE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,kBAEF,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAAC,EAAD,CAAWa,MAAOA,EAAOsC,YAAalG,EAAMkG,kB,oBClBnD,IAAMG,EAAS,IAAIC,IAAI,CAC5B,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,EAAG,OACJ,CAAC,GAAI,OACL,CAAC,GAAI,SAGMC,EAAa,IAAID,IAAI,CAChC,CAAC,EAAG,WACJ,CAAC,EAAG,YACJ,CAAC,EAAG,SACJ,CAAC,EAAG,SACJ,CAAC,EAAG,OACJ,CAAC,EAAG,QACJ,CAAC,EAAG,QACJ,CAAC,EAAG,UACJ,CAAC,EAAG,aACJ,CAAC,EAAG,WACJ,CAAC,GAAI,YACL,CAAC,GAAI,cAGMpC,EAAS,CACpB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WCrDa,SAASsC,EAAUC,EAAS7C,EAAOzB,EAAQD,EAAOoC,EAAMJ,EAAQC,EAAWvB,GACpFsB,IACFA,EAASwC,GAEPvC,IACFA,EAAY,eAEVG,EAAKqC,MAAQrC,EAAKqC,KAAO,MAAQrC,EAAKqC,MAAO,IAAIpC,MAAOqC,oBAAkBtC,EAAKqC,MAAO,IAAIpC,MAAOqC,oBACjGtC,EAAKuC,OAASvC,EAAKuC,MAAQ,KAAGvC,EAAKuC,MAAQ,GAC5CvC,EAAKuC,MAAQ,KAAIvC,EAAKuC,MAAQ,IACjC,IAAIC,EAAsB,SAAVlE,EAAmB,QAAU,QAEvCmE,EAEE,GAGL7E,EAFO,MAIRA,GAAc,GAEhB,IAAI8E,EAAgB,EAAE,EAAI9E,EAAM,EAAK6E,EAR9B,GAQqD,EAAE,EAAI7E,EAAM,EACpE+E,EAAa,EAAE,EAAI/E,EAAM,EAAK6E,EAAYA,EAAY,EAAE,EAAI7E,EAAM,EAClEgF,EAAmB,EAATD,EAAyB,EAAZD,EAC3B7E,EAAS,GAAM,EAAE8E,EAAa,EAAED,EAEhC,IAAIG,EAAMC,IAAU,UACjBC,OAAO,OACPC,KAAK,SAAUnF,GACfmF,KAAK,QAASpF,GAEbqF,EAAWd,EAAQe,QAAO,SAACC,GAAD,OAAUnD,EAAKuC,QAAU,IAAItC,KAAKkD,EAAM5G,IAAI6G,eAAiBpD,EAAKqC,OAAS,IAAIpC,KAAKkD,EAAM5G,IAAI+F,oBACxHe,EAAO,ID7BN,SAAmBd,EAAOF,GAI/B,IAFA,IAAIiB,EAAO,IAAIrD,KAAKoC,EAAME,EAAM,EAAG,GAAGjC,UAClCiD,EAAM,GACFC,EAAI,EAAGA,GAAIF,EAAME,IACvBD,EAAIE,KAAKD,GAEX,OAAOD,GCuBPnB,CAAkBpC,EAAKuC,MAAOvC,EAAKqC,MAAMqB,SAAQ,SAACC,GAChD,GAAGV,EAASnB,OAAS,EAAE,CACrB,IAAI8B,EAAaX,EAASY,WAAU,SAACV,GAAD,OAAS,IAAIlD,KAAKkD,EAAM5G,IAAIuH,eAAiBH,MAC9D,IAAhBC,EACDP,EAAKI,KAAK,CAACE,IAAKA,EAAKR,MAAOF,EAASW,KAErCP,EAAKI,KAAK,CAACE,IAAKA,EAAKR,MAAO,CAAC5G,GAAG,IAAI0D,KAAKD,EAAKqC,KAAMrC,EAAKuC,MAAOoB,GAAMrE,MAAO,WAG/E+D,EAAKI,KAAK,CAACE,IAAKA,EAAKR,MAAO,CAAC5G,GAAI,IAAI0D,KAAKD,EAAKqC,KAAMrC,EAAKuC,MAAOoB,GAAMrE,MAAO,SAKlF,IAAIyE,EAAOlB,EAAIE,OAAO,QAClBiB,EAAc,IAAIhC,IAEtBa,EAAIE,OAAO,QACRkB,MAAK,kBAAI7B,EAAmB8B,IAAIlE,EAAKuC,UACrCrF,MAAM,OAAQsF,GACdQ,KAAK,KAAK,kBAAIJ,EAAO,KACrBI,KAAK,IAAK,IACVA,KAAK,cAAe,UACpBA,KAAK,YAAa,MAErBH,EAAIE,OAAO,KACRoB,UAAU,QACVd,KAAK,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,MAAMe,QACpCrB,OAAO,QACPkB,MAAK,SAACI,GAAD,OAAKA,KACVnH,MAAM,OAAQsF,GACdQ,KAAK,KAAK,SAACqB,EAAGb,GAAJ,OAAQA,GAAGb,EAASD,GAAcC,EAAS,KACrDK,KAAK,IAAK,IACVA,KAAK,YAAa,MAEVH,EAAIsB,UAAU,QACtBd,KAAKA,GACLe,QACArB,OAAO,QACPC,KAAK,QAAS,QACdA,KAAK,KAAK,SAACqB,GAAD,OAAM,IAAIpE,KAAKoE,EAAElB,MAAM5G,IAAI+H,aAAa3B,EAASD,GAAaA,KACxEM,KAAK,KAAK,SAACqB,GAAD,ODPR,SAA8BE,GAKnC,IAJA,IAAIvE,EAAOuE,EAAGT,aAEVU,EAAU,EACVC,EAFU,IAAIxE,KAAKsE,EAAGG,WAAW,IAAIJ,YAGjCK,EAAQ,EAAGA,EAAM3E,EAAM2E,IACjB,IAATF,GACDA,EAAO,EACPD,KACQC,EAAO,GACfA,IAGJ,OAAOD,ECNapC,CAA6B,IAAInC,KAAKoE,EAAElB,MAAM5G,KAAK,IAAIoG,EAASD,GAAa,MAC9FM,KAAK,SAAUL,GACfK,KAAK,QAASL,GACdK,KAAK,KAAM,GACX9F,MAAM,QAAQ,SAACmH,GACZ,GAA4B,IAAzBA,EAAElB,MAAM7D,MAAMwC,OACf,OAAOjC,EACF,GAA4B,IAAzBwE,EAAElB,MAAM7D,MAAMwC,OAAa,CACnC,IAAI0B,EAAIlE,EAAMsF,QAAQP,EAAElB,MAAM7D,MAAM,IACpC,OAAOM,EAAO4D,GAGd,IAAIqB,EAAWd,EAAKhB,OAAO,kBACxBC,KAAK,KADO,aACKqB,EAAElB,MAAM5G,KACzByG,KAAK,KAAM,MACXA,KAAK,KAAM,MACXA,KAAK,KAAM,MACXA,KAAK,KAAM,QAWd,OAVAgB,EAAYc,IAAIT,EAAElB,MAAM5G,GAAIsI,GAE5BR,EAAElB,MAAM7D,MAAMoE,SAAQ,SAAClE,EAAM7B,GAC3BqG,EAAYE,IAAIG,EAAElB,MAAM5G,IAAIwG,OAAO,QAChCC,KAAK,UAAU,kBAAe,IAAVrF,EAAc,KAAQA,EAAM0G,EAAElB,MAAM7D,MAAMwC,OAAO,IAAI,OACzEkB,KAAK,aAAcpD,EAAON,EAAMsF,QAAQpF,KAC3CwE,EAAYE,IAAIG,EAAElB,MAAM5G,IAAIwG,OAAO,QAChCC,KAAK,UAAU,kBAAMrF,EAAM,GAAG0G,EAAElB,MAAM7D,MAAMwC,OAAO,IAAI,OACvDkB,KAAK,aAAcpD,EAAON,EAAMsF,QAAQpF,QAEvC,WAAN,OAAkB6E,EAAElB,MAAM5G,GAA1B,QAIHwG,OAAO,aACTkB,MAAK,SAACI,GAAD,OD5GH,SAAoBrE,GACzB,OAAO+B,EAAOmC,IAAIlE,EAAKoD,eAAiB,IAAMpD,EAAK8D,aAAe,KAAO9D,EAAKsC,iBC2GjEF,CAAmB,IAAInC,KAAKoE,EAAElB,MAAM5G,KAAO,MAAQ8H,EAAElB,MAAM7D,MAAMwC,OAAS,EDnDlF,SAAwBiD,GAC7B,IAAIxB,EAAM,GAOV,OANAwB,EAAIrB,SAAQ,SAACsB,EAAMrH,GACjB4F,GAAOyB,EACJrH,EAAQoH,EAAIjD,OAAO,IACpByB,GAAO,SAGJA,EC2CoFnB,CAAuBiC,EAAElB,MAAM7D,OAAS,OCrGrI,IAAM2F,EAAY,CAChB,CAAC,EAAG,WACJ,CAAC,EAAG,YACJ,CAAC,EAAG,SACJ,CAAC,EAAG,SACJ,CAAC,EAAG,OACJ,CAAC,EAAG,QACJ,CAAC,EAAG,QACJ,CAAC,EAAG,UACJ,CAAC,EAAG,aACJ,CAAC,EAAG,WACJ,CAAC,GAAI,YACL,CAAC,GAAI,aAGQ,SAASC,EAAMxJ,GAA2G,IAAD,EAC5G6F,IAAM4D,UAAS,IAAIlF,MAAOmD,eADkF,mBAC/Hb,EAD+H,KACxH6C,EADwH,OAE9G7D,IAAM4D,UAAS,IAAIlF,MAAOqC,kBAFoF,mBAE/HD,EAF+H,KAEzHgD,EAFyH,KAIlIzH,EAAQ0H,OAAOC,YAAc,GAC7B1H,EAAiB,GAARD,EACT4H,EAAgB9J,EAAM4D,MAAM4D,QAAO,SAAC1D,GAAD,MAAyB,KAATA,KAGvD,GFsDAsD,IAAU,UAAU2C,KAAK,IEtDtB/J,EAAM0D,YACP8C,EAAUxG,EAAMyG,QAASqD,EAAe3H,EAAQD,EAAO,CAAC2E,QAAOF,QAAO3G,EAAMkE,OAAQlE,EAAMmE,UAAWnE,EAAM4C,YAE3G,IAAI,IAAIiE,EAAQ,EAAGA,EAAQ,GAAIA,IAC7BL,EAAUxG,EAAMyG,QAASqD,EAAe3H,EAAQD,EAAO,CAAC2E,QAAOF,QAAO3G,EAAMkE,OAAQlE,EAAMmE,UAAWnE,EAAM4C,OAK/G,OCxCa,SAAoBgB,EAAOhB,EAAOuB,EAAWD,GAC1D,IAEI4C,EAAsB,SAAVlE,EAAmB,QAAU,QACzCT,EAHc,IAGSyB,EAAMwC,OAAO,GAFxB,EAEyCxC,EAAMwC,OAK3D4D,EAHM5C,IAAU,UACjBC,OAAO,OACPC,KAAK,SAAUnF,GACDkF,OAAO,KACrBC,KAAK,KAAK,UACVA,KAAK,SAAU,GAAwB1D,EAAMwC,QAC7CkB,KAAK,QAAS,KACjB1D,EAAMoE,SAAQ,SAAClE,EAAM7B,GACnB+H,EAAO3C,OAAO,QACXC,KAAK,IAAI,GACTA,KAAK,IAfQ,GAeSrF,EAdX,EAc6BA,GACxCqF,KAAK,SAhBQ,IAiBbA,KAAK,QAjBQ,IAkBb9F,MAAM,QAAQ,kBAAI0C,EAAOjC,MACzBT,MAAM,SAAUsF,GACnBkD,EAAO3C,OAAO,QACXkB,KAAKzE,GACLtC,MAAM,OAAQsF,GACdQ,KAAK,IAAI2C,IACT3C,KAAK,IAxBQ,GAwBSrF,EAvBX,EAuB6BA,EAAO,IAC/CqF,KAAK,SAAS,OAEnB0C,EAAO3C,OAAO,QACXC,KAAK,IAAI,GACTA,KAAK,IA7BU,GA6BO1D,EAAMwC,OA5Bf,EA4BkCxC,EAAMwC,QACrDkB,KAAK,SA9BU,IA+BfA,KAAK,QA/BU,IAgCf9F,MAAM,OAAQ2C,GACd3C,MAAM,SAAUsF,GACnBkD,EAAO3C,OAAO,QACXkB,KAAK,eACL/G,MAAM,OAAQsF,GACdQ,KAAK,IAAI2C,IACT3C,KAAK,IAtCU,GAsCO1D,EAAMwC,OArCf,EAqCkCxC,EAAMwC,OAAQ,IAC7DkB,KAAK,SAAS,IDFjB4C,CAAWJ,EAAe9J,EAAM4C,MAAO5C,EAAMmE,UAAWnE,EAAMkE,QAG5D,kBAAC1B,EAAA,EAAD,CAAWC,OAAO,EAAMjB,MAAQxB,EAAMwB,OACpC,kBAACmB,EAAA,EAAD,CAAMvC,GAAIJ,EAAM4C,MAAOpB,MAAO,CAACI,MAAuB,SAAhB5B,EAAM4C,MAAmB,QAAU,UACvE,kBAACD,EAAA,EAAKE,OAAN,KACE,kBAACF,EAAA,EAAKG,MAAN,uBAEF,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACzB,EAAA,EAAKgE,IAAN,CAAU9D,MAAO,CAACU,MAAMA,IACrBlC,EAAM0D,aACL,kBAAC6B,EAAA,EAAD,KACE,kBAACjE,EAAA,EAAKC,QAAN,CAAc6B,GAAG,SAAS0B,KAAK,QAC7BnD,MAAOkF,EAAMnC,WACb7C,SAAU,SAACC,GACTA,EAAEiD,iBACF,IAAIpD,EAAQwI,SAASrI,EAAEE,OAAOL,OAC9B+H,EAAS/H,KAGV4H,EAAU1F,KAAI,SAAClC,GAAD,OACb,4BAAQoC,IAAKpC,EAAM,GAAIA,MAAOA,EAAM,IAAKA,EAAM,SAKvD,kBAAC4D,EAAA,EAAD,KACE,kBAACjE,EAAA,EAAKC,QAAN,CAAcG,KAAK,SAASoD,KAAK,OAC/BnD,MAAOgF,EAAKjC,WACZ7C,SAAU,SAACC,GACTA,EAAEiD,iBACF,IAAIpD,EAAQwI,SAASrI,EAAEE,OAAOL,OAC9BgI,EAAQhI,QAKhB,yBAAKd,GAAG,aEwKlB,IASeuJ,EATL,CACRC,KArPF,SAAiBC,EAAeC,EAAkBC,GAChD,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAE1B,GAAK,cAAef,OAApB,CAKA,IAAIgB,EAAUhB,OAAOiB,UAAUC,KAAKR,EAAQC,GAG5CK,EAAQG,QAAU,SAASC,GACzBC,QAAQC,MAAM,oBAAqBN,EAAQM,OAC3CP,EAAO,4BAITC,EAAQO,gBAAkB,SAASH,GAEjC,IAAII,EAAKJ,EAAMhJ,OAAOqJ,OAClBC,EAAe,EAEnBd,EAAiBxC,SAAQ,SAAClD,EAAM7C,IA2BtC,SAAoBmJ,EAAQtG,GAC1B,OAAO,IAAI2F,SAAQ,SAACC,EAASC,GAC3B,IAAIY,EAAQH,EAAGI,kBACb1G,EACA,CAAC2G,QAAQ,KAAKC,eAAc,IAG9BH,EAAMR,QAAU,WACdE,QAAQC,MAAM,6BAA6BK,EAAML,OACjDP,EAAO,4BAETY,EAAMI,UAAY,WAChBjB,EAAQ,SAAD,OAAU5F,EAAV,+BAtCL8G,CAAWR,EAAItG,GAAM+G,MAAK,WACxBP,OACCQ,OAAM,SAACC,GACRd,QAAQC,MAAMa,MACbC,SAAQ,WACN/J,EAAM,IAAMuI,EAAiBpE,SAC9B6E,QAAQgB,IAAI,0BAA0BhK,EAAM,EAAGuI,EAAiBpE,QAC7DoE,EAAiBpE,SAAWkF,EAC7BZ,EAAQ,2BAERC,EAAO,oCAOjBC,EAAQe,UAAY,SAACX,GACNA,EAAMhJ,OAAOqJ,OAAOa,UACnB3B,GACZG,EAAQ,iBAvCVO,QAAQkB,KAAK,8CAkPjBC,OApLF,SAAgB9B,EAAeC,EAAkB8B,GAC/C,OAAO,IAAI5B,SAAQ,SAACC,EAASC,GAC3B,IAAIC,EAAUhB,OAAOiB,UAAUC,KAAKR,EAAQC,GAE5CK,EAAQe,UAAY,SAACX,GACnB,IACIsB,EADK1B,EAAQS,OACIiB,YAAYD,EAAiB,aAG9CE,EADQD,EAAYE,YAAYH,GACZD,SAExBG,EAAYZ,UAAY,SAACX,GACvBN,EAAQM,EAAMhJ,OAAOqJ,SAGvBkB,EAAYxB,QAAU,SAACC,GACrBL,EAAO,uBAGT2B,EAAYvB,QAAU,SAACC,GACrBL,EAAO,wBAIXC,EAAQG,QAAU,SAACC,GACjBL,EAAO,2BA4JX8B,OAvJF,SAAgBnC,EAAeC,EAAkB8B,EAAwBxL,GACvE,OAAO,IAAI4J,SAAQ,SAACC,EAASC,GAC3B,IAAIC,EAAUhB,OAAOiB,UAAUC,KAAKR,EAAQC,GAE5CK,EAAQe,UAAY,SAACX,GACnB,IACIsB,EADK1B,EAAQS,OACIiB,YAAYD,EAAiB,aAG9CE,EADQD,EAAYE,YAAYH,GACZ7D,IAAI3H,GAE5B0L,EAAYZ,UAAY,SAACX,GACvBN,EAAQM,EAAMhJ,OAAOqJ,SAGvBkB,EAAYxB,QAAU,SAACC,GACrBL,EAAO,uBAGT2B,EAAYvB,QAAU,SAACC,GACrBL,EAAO,wBAIXC,EAAQG,QAAU,SAACC,GACjBL,EAAO,2BA+HX+B,gBA1HF,SAAyBpC,EAAeC,EAAkB8B,EAAwBM,GAChF,OAAO,IAAIlC,SAAQ,SAACC,EAAQC,GAC1B,IAAIC,EAAUhB,OAAOiB,UAAUC,KAAKR,EAAQC,GAE5CK,EAAQe,UAAY,SAACX,GACnB,IACIsB,EADK1B,EAAQS,OACIiB,YAAYD,EAAiB,aAC9Cd,EAAQe,EAAYE,YAAYH,GAEpCM,EAAM3E,SAAQ,SAACsB,GACCiC,EAAMqB,IAAItD,GAEZyB,QAAU,SAASC,GAC7BL,EAAO,sBAAsBrB,OAIjCgD,EAAYO,WAAa,SAAS7B,GAChCN,EAAQ,4BAGV4B,EAAYvB,QAAU,SAACC,GACrBL,EAAO,yBAIXC,EAAQG,QAAU,SAACC,GACjBL,EAAO,4BAgGXmC,eA3FF,SAAwBxC,EAAeC,EAAkB8B,EAAwB/C,GAC/E,OAAO,IAAImB,SAAQ,SAACC,EAAQC,GAC1B,IAAIC,EAAUhB,OAAOiB,UAAUC,KAAKR,EAAQC,GAE5CK,EAAQe,UAAY,SAACX,GACnB,IACIsB,EADK1B,EAAQS,OACIiB,YAAYD,EAAiB,aACtCC,EAAYE,YAAYH,GAC9BO,IAAItD,GAEVgD,EAAYO,WAAa,SAAC7B,GACxBN,EAAQ,4BAGV4B,EAAYvB,QAAU,SAACC,GACrBL,EAAO,yBAIXC,EAAQG,QAAU,SAACC,GACjBL,EAAO,4BAwEXoC,UAnEF,SAAmBzC,EAAeC,EAAkB8B,EAAwBxL,GAC1E,OAAO,IAAI4J,SAAQ,SAACC,EAAQC,GAC1B,IAAIC,EAAUhB,OAAOiB,UAAUC,KAAKR,EAAQC,GAE5CK,EAAQe,UAAY,SAACX,GACnB,IACIsB,EADK1B,EAAQS,OACIiB,YAAYD,EAAiB,aAE9CE,EADQD,EAAYE,YAAYH,GACZW,OAAOnM,GAE/B0L,EAAYZ,UAAY,SAACX,GACvBN,EAAQ,qBAGV6B,EAAYxB,QAAU,SAACC,GACrBL,EAAO,2BAGT2B,EAAYvB,QAAU,SAACC,GACrBL,EAAO,4BAIXC,EAAQG,QAAU,SAACC,GACjBL,EAAO,+BA4CXsC,UAvCF,SAAmB3C,EAAeC,EAAkBC,GAClD,OAAO,IAAIC,SAAQ,SAACC,EAAQC,GAC1B,IAAIC,EAAUhB,OAAOiB,UAAUC,KAAKR,EAAQC,GAE5CK,EAAQe,UAAY,SAACX,GACnB,IAAII,EAAKR,EAAQS,OAEjBb,EAAiBxC,SAAQ,SAAClD,GACxB,IAAIwH,EAAclB,EAAGkB,YAAYxH,EAAM,aAEnCyH,EADQD,EAAYE,YAAY1H,GACZoI,QAExBX,EAAYZ,UAAY,SAACX,GAEvBN,EADc,uCAIhB6B,EAAYxB,QAAU,SAACC,GACrBL,EAAO,0BAGT2B,EAAYvB,QAAU,SAACC,GACrBL,EAAO,8BAKbC,EAAQG,QAAU,SAACC,GACjBL,EAAO,+BCxOTY,EACK,QADLA,EAEO,UAIU4B,E,YACnB,WAAYnN,GAAW,IAAD,8BACpB,4CAAMA,KACDqE,MAAQ,CACX+I,QAAS,OACTxJ,MAAO,GACP6C,QAAS,GACT7D,MAAO,QACPc,aAAa,EACbQ,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFC,UAAW,WAEb,EAAK1D,WAAa,EAAKA,WAAW4M,KAAhB,gBAClB,EAAK/J,SAAW,EAAKA,SAAS+J,KAAd,gBAChB,EAAKnH,YAAc,EAAKA,YAAYmH,KAAjB,gBACnB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAChB,EAAKtL,SAAW,EAAKA,SAASsL,KAAd,gBAChB,EAAK1J,SAAW,EAAKA,SAAS0J,KAAd,gBA3BI,E,iFAsCpB,IAPA,IAAIzK,EAAQ2K,IAAQ/E,IAAI,UAAYxD,KAAKX,MAAMzB,MAC3CuB,EAAYoJ,IAAQ/E,IAAI,cAAgBxD,KAAKX,MAAMF,UACnDqJ,EAAiC,SAAzBD,IAAQ/E,IAAI,SACpBtE,EAAe,GAIX4D,EAAE,EAAGA,EAAG,GAAIA,IAAI,CACtB,IAAIlG,EAAQ2L,IAAQ/E,IAAR,gBAAqBV,IACjC5D,EAAO6D,KAAKnG,GAAgBoD,KAAKX,MAAMH,OAAO4D,IAGhD9C,KAAKC,SAAS,CACZrC,MAAOA,EACPsB,OAAQA,EACRC,UAAWA,EACXT,YAAa8J,IAGfxI,KAAKyI,Y,iJAQQrD,EAAIC,KAlER,UAKE,EA6D2B,CAACkB,EAAaA,K,OAAlDH,E,sDAEAH,QAAQC,MAAR,M,WAECE,E,sDAEiBhB,EAAIqC,OAxEf,UAKE,EAmEoClB,EAAa,I,SAApD1D,E,UAEFjE,EAASiE,EAAYjE,O,mDAGvBqH,QAAQC,MAAR,M,6CAGgBd,EAAIgC,OAhFf,UAKE,EA2EoCb,I,QAA3C9E,E,0DAEAwE,QAAQC,MAAR,M,QAGAtH,IACFA,EAAQ,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAE3C6C,IACFA,EAAU,IAEZzB,KAAKC,SAAS,CACZrB,MAAOA,EACP6C,QAASA,I,2GAIF2G,GACTpI,KAAKC,SAAS,CACZmI,QAAQA,M,+BAIHxK,GACPoC,KAAKC,SAAS,CACZrC,MAAOA,IAET2K,IAAQnE,IAAI,QAASxG,EAAO,CAAC8K,QAAS,GAAIC,KAAM,O,kCAGtC/J,GACVoB,KAAKC,SAAS,CACZrB,MAAOA,IAETwG,EAAI0C,eAlHK,UAKE,EA6GwBvB,EAAa,CAAC1K,GAAG,EAAG+C,MAAMA,IAC5DiI,MAAK,SAACE,GACLd,QAAQgB,IAAIF,MACXD,OAAM,SAACC,GACRd,QAAQC,MAAMa,Q,+BAITyB,GACM,SAAVA,EACDxI,KAAKC,SAAS,CACZvB,aAAa,IAGfsB,KAAKC,SAAS,CACZvB,aAAa,IAGjB6J,IAAQnE,IAAI,QAASoE,EAAO,CAACE,QAAS,GAAIC,KAAM,O,+BAGzClG,GACP,IAAIhB,EAAUzB,KAAKX,MAAMoC,QACrBxE,EAAQwE,EAAQ0B,WAAU,SAACmB,GAAD,OAAaA,EAAKzI,KAAO4G,EAAM5G,OAC/C,IAAXoB,GACDwF,EAAM7D,MAAQ,CAAC6D,EAAM3D,aACd2D,EAAM3D,KACb2C,EAAQsB,KAAKN,GACbxF,EAAQwE,EAAQL,OAAO,GAEvBK,EAAQxE,GAAO2B,MAAMmE,KAAKN,EAAM3D,MAElCkB,KAAKC,SAAS,CACZwB,QAASA,IAEX2D,EAAI0C,eArJK,UAKE,EAgJwBvB,EAAe9E,EAAQxE,IACzD4J,MAAK,SAACE,GACLd,QAAQgB,IAAIF,MACXD,OAAM,SAACC,GACRd,QAAQC,MAAMa,Q,+BAITnK,EAAcK,GACrB,GAAGA,GAAS,EAAE,CACZ,IAAIiC,EAASc,KAAKX,MAAMH,OACxBA,EAAOjC,GAASL,EAChBoD,KAAKC,SAAS,CACZf,OAAQA,IAEVqJ,IAAQnE,IAAR,gBAAqBnH,GAASL,EAAO,CAAC8L,QAAS,GAAIC,KAAM,UAEzD3I,KAAKC,SAAS,CACZd,UAAWvC,IAEb2L,IAAQnE,IAAI,YAAaxH,EAAO,CAAC8L,QAAS,GAAIC,KAAM,O,+BAKtD,OACE,oCACE,kBAAC5N,EAAD,CACE6N,QAAQ,UACRxN,GAAI4E,KAAKX,MAAMzB,MACf1C,UAAW8E,KAAKX,MAAMzB,MACtBnC,WAAYuE,KAAKvE,aACnB,yBAAKe,MAAK,eAAMqM,EAAN,CAAcC,gBAAsC,UAArB9I,KAAKX,MAAMzB,MAAoBmL,EAAUC,KAClF,kBAAC7H,EAAD,CACE3E,MAAO,CAACwC,QAAgC,SAAvBgB,KAAKX,MAAM+I,QAAqB,QAAU,QAC3DxK,MAAOoC,KAAKX,MAAMzB,MAClBgB,MAAOoB,KAAKX,MAAMT,MAAOsC,YAAalB,KAAKkB,YAAahB,cAAeF,KAAKsI,WAC9E,kBAAC9D,EAAD,CACEhI,MAAO,CAACwC,QAAgC,UAAvBgB,KAAKX,MAAM+I,QAAsB,QAAU,QAC5DlJ,OAAQc,KAAKX,MAAMH,OACnBtB,MAAOoC,KAAKX,MAAMzB,MAClBuB,UAAWa,KAAKX,MAAMF,UACtBP,MAAOoB,KAAKX,MAAMT,MAAO6C,QAASzB,KAAKX,MAAMoC,QAAS/C,YAAasB,KAAKX,MAAMX,cAChF,kBAACnB,EAAD,CACEf,MAAO,CAACwC,QAAgC,aAAvBgB,KAAKX,MAAM+I,QAAyB,QAAU,QAC/DlJ,OAAQc,KAAKX,MAAMH,OACnBC,UAAWa,KAAKX,MAAMF,UACtBP,MAAOoB,KAAKX,MAAMT,MAClBN,SAAU0B,KAAK1B,SACfV,MAAOoC,KAAKX,MAAMzB,MAClBb,SAAUiD,KAAKjD,SACf2B,YAAasB,KAAKX,MAAMX,YACxBC,SAAUqB,KAAKrB,iB,GAlMQkC,IAAMC,WAyMjC+H,EAAS,CACbI,UAAW,QACX3L,QAAS,OACT4L,WAAY,QAGRH,EAAU,iBACVC,EAAS,oBCnNKG,QACW,cAA7BvE,OAAOwE,SAASC,UAEe,UAA7BzE,OAAOwE,SAASC,UAEhBzE,OAAOwE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,cDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhD,MAAK,SAAAiD,GACjCA,EAAaC,kB","file":"static/js/main.e585da64.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Navigation(props:any) {\r\n  let iconTheme = props.textTheme === \"dark\" ? \"light\" : \"dark\";\r\n  return(\r\n    <Navbar bg={props.bg} variant={props.textTheme} fixed=\"top\">\r\n      <Navbar.Brand onClick={()=>props.setSection(\"home\")}>#10For20Challenge</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\" variant=\"pills\" defaultActiveKey=\"home\">\r\n          <Nav.Link onClick={()=>props.setSection(\"home\")} eventKey=\"home\">Home</Nav.Link>\r\n          <Nav.Link onClick={()=>props.setSection(\"chart\")} eventKey=\"chart\">Chart</Nav.Link>\r\n          <Nav.Link onClick={()=>props.setSection(\"settings\")} eventKey=\"settings\">Settings</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <FontAwesomeIcon className={`text-${iconTheme}`} icon={faBell} />\r\n    </Navbar>\r\n  );\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport function Color(props:{color:string}){\r\n  return(\r\n    <div style={{...style, backgroundColor: props.color}} />\r\n  )\r\n}\r\n\r\nexport function ColorSetter(props:{color:string, setColor:Function, index:number}){\r\n  return(\r\n    <Form.Control style={inputStyle} type=\"color\" value={props.color} onChange={(e:any)=>props.setColor(e.target.value, props.index)} />\r\n  )\r\n}\r\n\r\nconst style = {\r\n  display: \"inline-block\",\r\n  border: \"1px solid black\",\r\n  borderRadius: \"3px\",\r\n  height: \"20px\",\r\n  width: \"20px\"\r\n}\r\n\r\nconst inputStyle = {\r\n  width: \"20px\",\r\n  height: \"20px\",\r\n  border: \"1px solid black\",\r\n  borderRadius: \"3px\",\r\n  padding: \"2px\"\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport { ColorSetter } from './Color';\r\n\r\nexport default function Settings(props:any){\r\n  return(\r\n    <Container fluid={true} style={ props.style }>\r\n      <CardColumns>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Page Theme</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <ListGroup activeKey={`#${props.theme}`}>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                href=\"#light\" as=\"button\" action \r\n                onClick={()=>props.setTheme(\"light\")}>Light</ListGroup.Item>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                href=\"#dark\" as=\"button\" action \r\n                onClick={()=>props.setTheme(\"dark\")}>Dark</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Colors &amp; Patterns</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Card.Text>This will be accordion groups once options are available.</Card.Text>\r\n            <ListGroup>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                action active>Colors</ListGroup.Item>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                action disabled>Patterns</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Chart Formats</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <ListGroup activeKey={`#${props.singleMonth ? 'monthly' : 'yearly'}`}>\r\n              <ListGroup.Item\r\n                variant={props.theme}\r\n                href=\"#monthly\" as=\"button\" action\r\n                onClick={()=>props.setChart(\"month\")}>Monthly</ListGroup.Item>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                href=\"#yearly\" as=\"button\" action\r\n                onClick={()=>props.setChart(\"year\")}>Yearly</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Task Colors</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <ListGroup>\r\n              {props.tasks && props.tasks.map((task:string, index:number)=>\r\n                <ListGroup.Item \r\n                  variant={props.theme}\r\n                  key={`task-${index}`} style={{display: \"flex\", alignItems: \"center\"}}>\r\n                  <ColorSetter color={props.colors[index]} setColor={props.setColor} index={index} />\r\n                  &nbsp;\r\n                  {index+1}. {task}\r\n                </ListGroup.Item>\r\n              )}\r\n              <ListGroup.Item\r\n                  variant={props.theme}\r\n                  style={{display: \"flex\", alignItems: \"center\"}}>\r\n                <ColorSetter color={props.noneColor} setColor={props.setColor} index={-1} />\r\n                &nbsp;\r\n                No Task\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n      </CardColumns>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class EntryForm extends React.Component<{tasks:string[], updateEntries:Function}, any>{\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n      task: \"placeholder\",\r\n      date: `${new Date().getFullYear()}-${(new Date().getMonth()+1).toString().padStart(2, '0')}-${new Date().getDate()}`,\r\n      validation: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange(e:any){\r\n    let { name, value } = e.target;\r\n    e.preventDefault();\r\n\r\n    if(name === \"task\"){\r\n      this.setState({\r\n        validation: \"\"\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  submitEntry(){\r\n    if(this.state.task !== \"\" && this.state.task !== \"placeholder\"){\r\n      this.props.updateEntries({id:new Date(this.state.date).valueOf(), date: this.state.date, task: this.state.task});\r\n    } else {\r\n      this.setState({\r\n        validation: \"You must select a task\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Form>\r\n        {/** Date Picker */}\r\n        <Form.Group controlId=\"date-pick\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label>Date</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control as=\"input\" type=\"date\" \r\n                name=\"date\"\r\n                value={this.state.date} \r\n                onChange={(e)=>this.handleChange(e)}>\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        {/** Time Spent (TODO) */}\r\n\r\n        {/** Task Completed (select) */}\r\n        <Form.Group controlId=\"task-pick\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label>Task Completed</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control as=\"select\" \r\n                name=\"task\"\r\n                value={this.state.task}\r\n                onChange={(e)=>this.handleChange(e)}\r\n              >\r\n                <option value=\"placeholder\" disabled hidden>Select a Task</option>\r\n                {this.props.tasks && this.props.tasks.map((task)=>\r\n                  task !== \"\" &&\r\n                    <option key={task} value={task}>{task}</option>\r\n                )}\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Text className=\"text-muted\">\r\n              { this.state.validation }\r\n            </Form.Text>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" onClick={()=>this.submitEntry()}>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n// form for adding/editing tasks to the list of 10\r\nexport default class TaskForm extends React.Component<{tasks:string[], updateTasks:Function}, any>{\r\n  constructor(props:{tasks:string[], updateTasks:Function}){\r\n    super(props);\r\n    this.state = {\r\n      tasks:this.props.tasks,\r\n    }\r\n  }\r\n\r\n  onChange(e:any, index:number){\r\n    e.preventDefault();\r\n\r\n    let tasks = this.state.tasks;\r\n    tasks[index] = e.target.value;\r\n\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Form>\r\n        {this.state.tasks.map((task:string, index:number)=>\r\n          <Form.Group controlId={\"task-\" + index} key={\"task-\" + index}>\r\n            <div style={taskRow}>\r\n              <Form.Label style={{width: \"40px\", marginTop: \"5px\"}}>{index+1}.</Form.Label>\r\n              <Form.Control type=\"text\" value={task}  onChange={(e:any)=>this.onChange(e, index)} />\r\n            </div>\r\n          </Form.Group>\r\n        )}\r\n        <Button variant=\"primary\" onClick={()=>this.props.updateTasks(this.state.tasks)}>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nlet taskRow = {\r\n  display: \"flex\",\r\n  alignItems: \"center\"\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport EntryForm from './EntryForm';\r\nimport TasksForm from './TaskForm';\r\n\r\nexport default function Home(props:any){\r\n  let tasks = props.tasks;\r\n  return (\r\n    <Container fluid={true} style={ props.style }>\r\n      <CardColumns>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Home Section</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Card.Text>Here you can manage your tasks and submit a new entry.</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>New Entry</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <EntryForm tasks={tasks} updateEntries={props.updateEntries} />\r\n          </Card.Body>\r\n        </Card>\r\n        {tasks.length > 0 &&\r\n          <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n            <Card.Header>\r\n              <Card.Title>My Tasks</Card.Title>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <TasksForm tasks={tasks} updateTasks={props.updateTasks} />\r\n            </Card.Body>\r\n          </Card>\r\n        }\r\n      </CardColumns>\r\n    </Container>\r\n  );\r\n}","import * as d3 from 'd3';\r\n\r\nexport function dateString(date){\r\n  return months.get(date.getUTCMonth()) + \" \" + date.getUTCDate() + \", \" + date.getUTCFullYear();\r\n}\r\n\r\nexport function monthDays(month, year){\r\n  // this function should take month number as a 0-base!\r\n  let days = new Date(year, month+1, 0).getDate();\r\n  let res = [];\r\n  for(let i = 1; i<= days; i++){\r\n    res.push(i);\r\n  }\r\n  return res;\r\n}\r\n\r\nexport const months = new Map([\r\n  [0, \"Jan\"],\r\n  [1, \"Feb\"],\r\n  [2, \"Mar\"],\r\n  [3, \"Apr\"],\r\n  [4, \"May\"],\r\n  [5, \"Jun\"],\r\n  [6, \"Jul\"],\r\n  [7, \"Aug\"],\r\n  [8, \"Sep\"],\r\n  [9, \"Oct\"],\r\n  [10, \"Nov\"],\r\n  [11, \"Dec\"]\r\n]);\r\n\r\nexport const fullMonths = new Map([\r\n  [0, \"January\"],\r\n  [1, \"February\"],\r\n  [2, \"March\"],\r\n  [3, \"April\"],\r\n  [4, \"May\"],\r\n  [5, \"June\"],\r\n  [6, \"July\"],\r\n  [7, \"August\"],\r\n  [8, \"September\"],\r\n  [9, \"October\"],\r\n  [10, \"November\"],\r\n  [11, \"December\"]\r\n]);\r\n\r\nexport const colors = [\r\n  \"#FF0000\", // red\r\n  \"#FFA500\", // orange\r\n  \"#FFFF00\", // yellow\r\n  \"#32CD32\", // limegreen\r\n  \"#008000\", // green\r\n  \"#ADD8E6\", // lightblue\r\n  \"#0000FF\", // blue\r\n  \"#8A2BE2\", // blueviolet\r\n  \"#800080\", // purple\r\n  \"#FFC0CB\" // pink\r\n];\r\n\r\nexport function stringifyArray(arr){\r\n  let res = \"\";\r\n  arr.forEach((item, index)=>{\r\n    res += item;\r\n    if(index < arr.length-1){\r\n      res += \"\\n\";\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function getWeekOfMonthNumber(dt){\r\n  let date = dt.getUTCDate();\r\n  let initDay = new Date(dt.setUTCDate(1)).getUTCDay();\r\n  let weekNum = 1;\r\n  let cDay = initDay;\r\n  for(let cDate = 1; cDate<date; cDate++){\r\n    if(cDay === 6){\r\n      cDay = 0;\r\n      weekNum++;\r\n    } else if(cDay < 6) {\r\n      cDay++;\r\n    }\r\n  }\r\n  return weekNum;\r\n}\r\n\r\nexport function clearCanvas(){\r\n  d3.select(\"#chart\").html(\"\");\r\n}","import * as d3 from 'd3';\r\nimport * as helpers from './helpers';\r\n\r\nexport default function drawMonth(entries, tasks, height, width, date, colors, noneColor, theme){\r\n  if(!colors){\r\n    colors = helpers.colors;\r\n  }\r\n  if(!noneColor){\r\n    noneColor = \"lightgray\";\r\n  }\r\n  if(!date.year || date.year < 1970 || date.year > new Date().getUTCFullYear()) date.year = new Date().getUTCFullYear();\r\n  if(!date.month || date.month < 0) date.month = 0;\r\n  if(date.month > 11) date.month = 11;\r\n  let textColor = theme === \"dark\" ? \"white\" : \"black\"\r\n  /** SIZING & SCALE */\r\n  const max = {\r\n    pad: 10,\r\n    size: 50,\r\n    total: (10*6) + (50*7)\r\n  };\r\n  if(width > max.total){\r\n    // divide the width into multiple columns\r\n    width = width/2;\r\n  }\r\n  let cellpadding = ((5/6 * width/7) > max.size) ? max.pad : (1/6 * width/8);\r\n  let cellsize = ((5/6 * width/7) > max.size) ? max.size : (5/6 * width/7);\r\n  let aWidth = (cellsize*7)+(cellpadding*6);\r\n  height = 60 + (6*cellsize) + (5*cellpadding);\r\n  /** SVG */\r\n  let svg = d3.select(\"#chart\")\r\n    .append('svg')\r\n    .attr(\"height\", height)\r\n    .attr(\"width\", width);\r\n  /** CHART */\r\n  let filtered = entries.filter((entry)=> date.month === new Date(entry.id).getUTCMonth() && date.year === new Date(entry.id).getUTCFullYear());\r\n  let data = [];\r\n  helpers.monthDays(date.month, date.year).forEach((day)=>{\r\n    if(filtered.length > 0){\r\n      let entryIndex = filtered.findIndex((entry)=>new Date(entry.id).getUTCDate() === day);\r\n      if(entryIndex !== -1){\r\n        data.push({day: day, entry: filtered[entryIndex]});\r\n      } else {\r\n        data.push({day: day, entry: {id:new Date(date.year, date.month, day), tasks: []}});\r\n      }\r\n    } else {\r\n      data.push({day: day, entry: {id: new Date(date.year, date.month, day), tasks: []}});\r\n    }\r\n  });\r\n\r\n  /** LINEAR GRADIENT DEFS */\r\n  let defs = svg.append(\"defs\");\r\n  let gradientMap = new Map();\r\n\r\n  svg.append(\"text\")\r\n    .text(()=>helpers.fullMonths.get(date.month))\r\n    .style(\"fill\", textColor)\r\n    .attr(\"x\", ()=>aWidth/2)\r\n    .attr(\"y\", 25)\r\n    .attr(\"text-anchor\", \"middle\")\r\n    .attr(\"font-size\", \"24\");\r\n  \r\n  svg.append(\"g\")\r\n    .selectAll(\"text\")\r\n    .data([\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"]).enter()\r\n    .append(\"text\")\r\n    .text((d)=>d)\r\n    .style(\"fill\", textColor)\r\n    .attr(\"x\", (d, i)=>i*(cellsize+cellpadding)+(cellsize/2))\r\n    .attr(\"y\", 50)\r\n    .attr(\"font-size\", \"24\");\r\n\r\n  let cell = svg.selectAll(\"rect\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .attr(\"class\", \"cell\")\r\n    .attr(\"x\", (d)=> new Date(d.entry.id).getUTCDay()*(cellsize+cellpadding)+cellpadding)\r\n    .attr(\"y\", (d)=> (helpers.getWeekOfMonthNumber(new Date(d.entry.id))-1)*(cellsize+cellpadding)+60)\r\n    .attr(\"height\", cellsize)\r\n    .attr(\"width\", cellsize)\r\n    .attr(\"rx\", 5)\r\n    .style(\"fill\", (d)=>{\r\n        if(d.entry.tasks.length === 0){\r\n          return noneColor;\r\n        } else if(d.entry.tasks.length === 1){\r\n          let i = tasks.indexOf(d.entry.tasks[0]);\r\n          return colors[i];\r\n        } else {\r\n          // LINEAR GRADIENT\r\n          let gradient = defs.append(\"linearGradient\")\r\n            .attr(\"id\", `lg-${d.entry.id}`)\r\n            .attr(\"x1\", \"0%\")\r\n            .attr(\"y1\", \"0%\")\r\n            .attr(\"x2\", \"0%\")\r\n            .attr(\"y2\", \"100%\");\r\n          gradientMap.set(d.entry.id, gradient);\r\n\r\n          d.entry.tasks.forEach((task, index)=>{\r\n            gradientMap.get(d.entry.id).append(\"stop\")\r\n              .attr(\"offset\", ()=> index === 0 ? 0+\"%\" : index/d.entry.tasks.length*100+\"%\")\r\n              .attr(\"stop-color\", colors[tasks.indexOf(task)]);\r\n            gradientMap.get(d.entry.id).append(\"stop\")\r\n              .attr(\"offset\", ()=> (index+1)/d.entry.tasks.length*100+\"%\")\r\n              .attr(\"stop-color\", colors[tasks.indexOf(task)]);\r\n          });\r\n          return `url(#lg-${d.entry.id})`;\r\n        }\r\n      });\r\n  \r\n  cell.append(\"svg:title\")\r\n    .text((d)=>helpers.dateString(new Date(d.entry.id)) + \"\\n\" + (d.entry.tasks.length > 0 ? helpers.stringifyArray(d.entry.tasks) : \"\"));\r\n}\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport drawMonth from './charts/drawMonth';\r\nimport drawLegend from './charts/legend';\r\nimport { clearCanvas } from './charts/helpers';\r\n\r\nconst monthsArr = [\r\n  [0, \"January\"],\r\n  [1, \"February\"],\r\n  [2, \"March\"],\r\n  [3, \"April\"],\r\n  [4, \"May\"],\r\n  [5, \"June\"],\r\n  [6, \"July\"],\r\n  [7, \"August\"],\r\n  [8, \"September\"],\r\n  [9, \"October\"],\r\n  [10, \"November\"],\r\n  [11, \"December\"]\r\n];\r\n\r\nexport default function Chart(props:{entries:any, tasks: any, style:any, colors:any, noneColor:string, theme:any, singleMonth:boolean}) {\r\n  const [month, setMonth] = React.useState(new Date().getUTCMonth());\r\n  const [year, setYear] = React.useState(new Date().getUTCFullYear());\r\n  // available width, based on CSS: 2.5rem + 70px\r\n  let width = window.innerHeight - 90;;\r\n  let height = width * .7;\r\n  let filteredTasks = props.tasks.filter((task:string)=> task !== \"\");\r\n\r\n  clearCanvas();\r\n  if(props.singleMonth){\r\n    drawMonth(props.entries, filteredTasks, height, width, {month, year}, props.colors, props.noneColor, props.theme);\r\n  } else {\r\n    for(let month = 0; month < 12; month++){\r\n      drawMonth(props.entries, filteredTasks, height, width, {month, year}, props.colors, props.noneColor, props.theme);\r\n    }\r\n  }\r\n  drawLegend(filteredTasks, props.theme, props.noneColor, props.colors);\r\n  \r\n  return (\r\n    <Container fluid={true} style={ props.style }>\r\n      <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n        <Card.Header>\r\n          <Card.Title>Chart section</Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Form.Row style={{width:width}}>\r\n            {props.singleMonth &&\r\n              <Col>\r\n                <Form.Control as=\"select\" name=\"month\" \r\n                  value={month.toString()}\r\n                  onChange={(e:any)=>{\r\n                    e.preventDefault();\r\n                    let value = parseInt(e.target.value);\r\n                    setMonth(value);\r\n                  }}\r\n                >\r\n                  {monthsArr.map((value)=>\r\n                    <option key={value[1]} value={value[0]}>{value[1]}</option>\r\n                  )}\r\n                </Form.Control>\r\n              </Col>\r\n            }\r\n            <Col>\r\n              <Form.Control type=\"number\" name=\"year\"\r\n                value={year.toString()}\r\n                onChange={(e:any)=>{\r\n                  e.preventDefault();\r\n                  let value = parseInt(e.target.value);\r\n                  setYear(value);\r\n                }}\r\n              />\r\n            </Col>\r\n          </Form.Row>\r\n          <div id=\"chart\" />\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}","import * as d3 from 'd3';\r\n\r\nexport default function drawLegend(tasks, theme, noneColor, colors){\r\n  let legendblock = 20;\r\n  let legendpad = 5;\r\n  let textColor = theme === \"dark\" ? \"white\" : \"black\";\r\n  let height = (legendblock*(tasks.length+1)) + (legendpad*tasks.length);\r\n\r\n  let svg = d3.select(\"#chart\")\r\n    .append('svg')\r\n    .attr(\"height\", height);\r\n  let legend = svg.append(\"g\")\r\n    .attr(\"id\",\"legend\")\r\n    .attr(\"height\", (legendblock+legendpad)*tasks.length)\r\n    .attr(\"width\", 100);\r\n  tasks.forEach((task, index)=>{\r\n    legend.append(\"rect\")\r\n      .attr(\"x\",0)\r\n      .attr(\"y\",(legendblock*index)+(legendpad*index))\r\n      .attr(\"height\",legendblock)\r\n      .attr(\"width\",legendblock)\r\n      .style(\"fill\", ()=>colors[index])\r\n      .style(\"stroke\", textColor);\r\n    legend.append(\"text\")\r\n      .text(task)\r\n      .style(\"fill\", textColor)\r\n      .attr(\"x\",legendblock+legendpad)\r\n      .attr(\"y\",(legendblock*index)+(legendpad*index)+15)\r\n      .attr(\"height\",20);\r\n  });\r\n  legend.append(\"rect\")\r\n    .attr(\"x\",0)\r\n    .attr(\"y\",(legendblock*tasks.length)+(legendpad*tasks.length))\r\n    .attr(\"height\",legendblock)\r\n    .attr(\"width\",legendblock)\r\n    .style(\"fill\", noneColor)\r\n    .style(\"stroke\", textColor);\r\n  legend.append(\"text\")\r\n    .text(\"No activity\")\r\n    .style(\"fill\", textColor)\r\n    .attr(\"x\",legendblock+legendpad)\r\n    .attr(\"y\",(legendblock*tasks.length)+(legendpad*tasks.length)+15)\r\n    .attr(\"height\",20);\r\n}","\r\nfunction initIDB(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=> {\r\n    // dbName will be the DB name, storeName will be the store name.\r\n    if(!('indexedDB' in window)){\r\n      console.warn(\"This browser doesn't support IndexedDB\");\r\n      return;\r\n    }\r\n    // create or open IndexedDB\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    // handle errors\r\n    request.onerror = function(event:any){\r\n      console.error(\"IndexedDB Error: \", request.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n\r\n    // handle db upgrades\r\n    request.onupgradeneeded = function(event:any) {\r\n      // save the IDBDatabase interface\r\n      let db = event.target.result;\r\n      let successCount = 0;\r\n      // Create an objectStore for the database\r\n      objectStoreNames.forEach((name, index)=>{\r\n        updgradeDB(db, name).then(()=>{\r\n          successCount++;\r\n        }).catch((message)=>{\r\n          console.error(message);\r\n        }).finally(()=>{\r\n          if(index+1 === objectStoreNames.length){\r\n            console.log(\"Reached end of foreach:\",index+1, objectStoreNames.length)\r\n            if(objectStoreNames.length === successCount){\r\n              resolve(\"Database access granted\");\r\n            } else {\r\n              reject(\"Database access rejected\");\r\n            }\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let curVer = event.target.result.version;\r\n      if(curVer === dbVersion){\r\n        resolve('success');\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction updgradeDB(db:any, name:string){\r\n  return new Promise((resolve, reject)=>{\r\n    let store = db.createObjectStore(\r\n      name,\r\n      {keyPath:'id',autoIncrement:true}\r\n    );\r\n\r\n    store.onerror = () => {\r\n      console.error(\"store not created, error: \",store.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n    store.onsuccess = () =>{\r\n      resolve(`Store ${name} created successfully`);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getAll(dbName:string, dbVersion:number, objectStoreName:string):Promise<object[]|string>{\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.getAll();\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction getOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.get(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateMany(dbName:string, dbVersion:number, objectStoreName:string, items:any[]) {\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq;\r\n      items.forEach((item:any) => {\r\n        objStoreReq = store.put(item);\r\n        \r\n        objStoreReq.onerror = function(event) {\r\n          reject(\"Error storing item \"+item);\r\n        };\r\n      });\r\n\r\n      transaction.oncomplete = function(event) {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateOne(dbName:string, dbVersion:number, objectStoreName:string, item:any){\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      store.put(item);\r\n\r\n      transaction.oncomplete = (event:any) => {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.delete(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(\"Item was deleted\");\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete entry\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteAll(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n\r\n      objectStoreNames.forEach((name)=>{\r\n        let transaction = db.transaction(name, 'readwrite');\r\n        let store = transaction.objectStore(name);\r\n        let objStoreReq = store.clear();\r\n  \r\n        objStoreReq.onsuccess = (event:any) => {\r\n          let message = \"Data has been successfully deleted\";\r\n          resolve(message);\r\n        };\r\n  \r\n        objStoreReq.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n\r\n        transaction.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n      });\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete data\");\r\n    };\r\n  });\r\n}\r\nlet iDB = {\r\n  init: initIDB,\r\n  getAll: getAll,\r\n  getOne: getOne,\r\n  addOrUpdateMany: addOrUpdateMany, \r\n  addOrUpdateOne: addOrUpdateOne, \r\n  deleteOne: deleteOne, \r\n  deleteAll: deleteAll\r\n};\r\nexport default iDB;","import React from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport Navigation from './components/Nav';\r\nimport Settings from './components/Settings';\r\nimport Home from './components/Home';\r\nimport Chart from './components/Chart';\r\nimport iDB from './data/indexedDb';\r\n\r\nlet dbName = \"10for20\";\r\nlet store = {\r\n  tasks: \"tasks\",\r\n  entries: \"entries\"\r\n};\r\nconst DB_VER = 1;\r\n\r\nexport default class App extends React.Component<any,any> {\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n      section: \"home\",\r\n      tasks: [],\r\n      entries: [],\r\n      theme: \"light\",\r\n      singleMonth: true,\r\n      colors: [\r\n        \"#FF0000\", // red\r\n        \"#FFA500\", // orange\r\n        \"#FFFF00\", // yellow\r\n        \"#32CD32\", // limegreen\r\n        \"#008000\", // green\r\n        \"#ADD8E6\", // lightblue\r\n        \"#0000FF\", // blue\r\n        \"#8A2BE2\", // blueviolet\r\n        \"#800080\", // purple\r\n        \"#FFC0CB\" // pink\r\n      ],\r\n      noneColor: \"#D3D3D3\"\r\n    };\r\n    this.setSection = this.setSection.bind(this);\r\n    this.setTheme = this.setTheme.bind(this);\r\n    this.updateTasks = this.updateTasks.bind(this);\r\n    this.addEntry = this.addEntry.bind(this);\r\n    this.setColor = this.setColor.bind(this);\r\n    this.setChart = this.setChart.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let theme = Cookies.get('theme') || this.state.theme;\r\n    let noneColor = Cookies.get('noneColor') || this.state.noneColor;\r\n    let chart = Cookies.get('chart') === 'year' ? false : true;\r\n    let colors:any[] = [];\r\n    // FUTURE: When updating # of tasks, \r\n    //    the number for this loop needs to be adjusted.\r\n    \r\n    for(let i=0; i< 10; i++){\r\n      let color = Cookies.get(`color-${i}`);\r\n      colors.push(color ? color : this.state.colors[i]);\r\n    }\r\n    \r\n    this.setState({\r\n      theme: theme,\r\n      colors: colors,\r\n      noneColor: noneColor,\r\n      singleMonth: chart\r\n    });\r\n     \r\n    this.getData();\r\n  }\r\n\r\n  async getData(){\r\n    let db;\r\n    let tasks;\r\n    let entries;\r\n    try {\r\n      db = await iDB.init(dbName, DB_VER, [store.tasks, store.entries]);\r\n    } catch(e) {\r\n      console.error(e);\r\n    }\r\n    if(db){\r\n      try {\r\n        let res = await iDB.getOne(dbName, DB_VER, store.tasks, 1);\r\n        if(res){\r\n          tasks = (res as any).tasks;\r\n        }\r\n      } catch(e) {\r\n        console.error(e);\r\n      }\r\n      try {\r\n        entries = await iDB.getAll(dbName, DB_VER, store.entries);\r\n      } catch(e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if(!tasks){\r\n      tasks = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n    }\r\n    if(!entries){\r\n      entries = [];\r\n    }\r\n    this.setState({\r\n      tasks: tasks,\r\n      entries: entries\r\n    })\r\n  }\r\n\r\n  setSection(section:string) {\r\n    this.setState({\r\n      section:section\r\n    });\r\n  }\r\n\r\n  setTheme(theme:string) {\r\n    this.setState({\r\n      theme: theme\r\n    });\r\n    Cookies.set('theme', theme, {expires: 30, path: ''});\r\n  }\r\n\r\n  updateTasks(tasks:any){\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.tasks, {id:1, tasks:tasks})\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  setChart(chart:string){\r\n    if(chart === \"year\"){\r\n      this.setState({\r\n        singleMonth: false\r\n      });\r\n    } else {\r\n      this.setState({\r\n        singleMonth: true\r\n      });\r\n    }\r\n    Cookies.set('chart', chart, {expires: 30, path: ''});\r\n  }\r\n\r\n  addEntry(entry:any){\r\n    let entries = this.state.entries;\r\n    let index = entries.findIndex((item:any)=> item.id === entry.id);\r\n    if(index === -1){\r\n      entry.tasks = [entry.task];\r\n      delete entry.task;\r\n      entries.push(entry);\r\n      index = entries.length-1;\r\n    } else {\r\n      entries[index].tasks.push(entry.task);\r\n    }\r\n    this.setState({\r\n      entries: entries\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.entries, entries[index])\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  setColor(color:string, index:number){\r\n    if(index > -1){\r\n      let colors = this.state.colors;\r\n      colors[index] = color;\r\n      this.setState({\r\n        colors: colors\r\n      });\r\n      Cookies.set(`color-${index}`, color, {expires: 30, path: ''});\r\n    } else {\r\n      this.setState({\r\n        noneColor: color\r\n      });\r\n      Cookies.set('noneColor', color, {expires: 30, path: ''});\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n        <Navigation\r\n          current=\"Current\" \r\n          bg={this.state.theme} \r\n          textTheme={this.state.theme}\r\n          setSection={this.setSection} />\r\n        <div style={{...pageBg, backgroundColor: this.state.theme === \"light\" ? lightBG : darkBG}}>\r\n        <Home \r\n          style={{display: this.state.section === \"home\" ? \"block\" : \"none\"}} \r\n          theme={this.state.theme}\r\n          tasks={this.state.tasks} updateTasks={this.updateTasks} updateEntries={this.addEntry} />\r\n        <Chart\r\n          style={{display: this.state.section === \"chart\" ? \"block\" : \"none\"}}\r\n          colors={this.state.colors}\r\n          theme={this.state.theme}\r\n          noneColor={this.state.noneColor}\r\n          tasks={this.state.tasks} entries={this.state.entries} singleMonth={this.state.singleMonth} />\r\n        <Settings \r\n          style={{display: this.state.section === \"settings\" ? \"block\" : \"none\"}}\r\n          colors={this.state.colors}\r\n          noneColor={this.state.noneColor}\r\n          tasks={this.state.tasks}\r\n          setTheme={this.setTheme}\r\n          theme={this.state.theme}\r\n          setColor={this.setColor}\r\n          singleMonth={this.state.singleMonth}\r\n          setChart={this.setChart} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst pageBg = {\r\n  minHeight: \"100vh\",\r\n  padding: \"20px\",\r\n  paddingTop: \"76px\"\r\n};\r\n\r\nconst lightBG = \"rgba(0,0,0,.1)\";\r\nconst darkBG = \"hsl(208, 8%, 30%)\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceworker';\r\n//import 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById(\"react-app\")\r\n );\r\n\r\n // If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}