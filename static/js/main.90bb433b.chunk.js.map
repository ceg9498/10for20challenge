{"version":3,"sources":["components/Nav.tsx","components/Color.tsx","components/Settings.tsx","components/EntryForm.tsx","components/TaskForm.tsx","components/Home.tsx","components/charts/helpers.js","components/charts/drawMonth.js","components/Chart.tsx","data/indexedDb.ts","App.tsx","serviceworker.ts","index.tsx"],"names":["Navigation","props","iconTheme","textTheme","Navbar","bg","variant","fixed","Brand","onClick","setSection","Toggle","aria-controls","Collapse","id","Nav","className","defaultActiveKey","Link","eventKey","icon","faBell","ColorSetter","Form","Control","style","inputStyle","type","value","color","onChange","e","setColor","target","index","width","height","border","borderRadius","padding","Settings","Container","fluid","CardColumns","Card","theme","Header","Title","Body","ListGroup","activeKey","Item","href","as","action","setTheme","Text","active","disabled","tasks","map","task","key","display","alignItems","colors","noneColor","EntryForm","state","date","Date","getFullYear","getMonth","toString","padStart","getDate","validation","name","preventDefault","this","setState","updateEntries","valueOf","Group","controlId","Row","Col","Label","handleChange","hidden","Button","submitEntry","React","Component","TaskForm","taskRow","marginTop","updateTasks","Home","length","months","Map","drawMonth","entries","monthIndex","helpers","textColor","d3","html","filter","svg","append","attr","filtered","entry","getUTCMonth","data","year","getUTCFullYear","month","days","res","i","push","forEach","day","entryIndex","findIndex","getUTCDate","selectAll","enter","text","d","cellsize","getUTCDay","dt","weekNum","cDay","setUTCDate","cDate","indexOf","get","arr","item","legend","legendblock","Chart","useState","setMonth","parseInt","iDB","init","dbName","dbVersion","objectStoreNames","Promise","resolve","reject","window","request","indexedDB","open","onerror","event","console","error","onupgradeneeded","db","result","successCount","store","createObjectStore","keyPath","autoIncrement","onsuccess","updgradeDB","then","catch","message","finally","log","version","warn","getAll","objectStoreName","transaction","objStoreReq","objectStore","getOne","addOrUpdateMany","items","put","oncomplete","addOrUpdateOne","deleteOne","delete","deleteAll","clear","App","section","bind","addEntry","Cookies","getData","set","expires","path","current","pageBg","backgroundColor","lightBG","darkBG","minHeight","paddingTop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90bb433b.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Navigation(props:any) {\r\n  let iconTheme = props.textTheme === \"dark\" ? \"light\" : \"dark\";\r\n  return(\r\n    <Navbar bg={props.bg} variant={props.textTheme} fixed=\"top\">\r\n      <Navbar.Brand onClick={()=>props.setSection(\"home\")}>#10For20Challenge</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\" variant=\"pills\" defaultActiveKey=\"home\">\r\n          <Nav.Link onClick={()=>props.setSection(\"home\")} eventKey=\"home\">Home</Nav.Link>\r\n          <Nav.Link onClick={()=>props.setSection(\"chart\")} eventKey=\"chart\">Chart</Nav.Link>\r\n          <Nav.Link onClick={()=>props.setSection(\"settings\")} eventKey=\"settings\">Settings</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <FontAwesomeIcon className={`text-${iconTheme}`} icon={faBell} />\r\n    </Navbar>\r\n  );\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nexport function Color(props:{color:string}){\r\n  return(\r\n    <div style={{...style, backgroundColor: props.color}} />\r\n  )\r\n}\r\n\r\nexport function ColorSetter(props:{color:string, setColor:Function, index:number}){\r\n  return(\r\n    <Form.Control style={inputStyle} type=\"color\" value={props.color} onChange={(e:any)=>props.setColor(e.target.value, props.index)} />\r\n  )\r\n}\r\n\r\nconst style = {\r\n  display: \"inline-block\",\r\n  border: \"1px solid black\",\r\n  borderRadius: \"3px\",\r\n  height: \"20px\",\r\n  width: \"20px\"\r\n}\r\n\r\nconst inputStyle = {\r\n  width: \"20px\",\r\n  height: \"20px\",\r\n  border: \"1px solid black\",\r\n  borderRadius: \"3px\",\r\n  padding: \"2px\"\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport { ColorSetter } from './Color';\r\n\r\nexport default function Settings(props:any){\r\n  return(\r\n    <Container fluid={true} style={ props.style }>\r\n      <CardColumns>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Page Theme</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <ListGroup activeKey={`#${props.theme}`}>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                href=\"#light\" as=\"button\" action \r\n                onClick={()=>props.setTheme(\"light\")}>Light</ListGroup.Item>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                href=\"#dark\" as=\"button\" action \r\n                onClick={()=>props.setTheme(\"dark\")}>Dark</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Colors &amp; Patterns</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Card.Text>This will be accordion groups once options are available.</Card.Text>\r\n            <ListGroup>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                action active>Colors</ListGroup.Item>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                action disabled>Patterns</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Chart Formats</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <ListGroup>\r\n              <ListGroup.Item\r\n                variant={props.theme}\r\n                action active>Monthly</ListGroup.Item>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                action disabled>Weekly</ListGroup.Item>\r\n              <ListGroup.Item \r\n                variant={props.theme}\r\n                action disabled>Calendar View</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Task Colors</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <ListGroup>\r\n              {props.tasks && props.tasks.map((task:string, index:number)=>\r\n                <ListGroup.Item \r\n                  variant={props.theme}\r\n                  key={`task-${index}`} style={{display: \"flex\", alignItems: \"center\"}}>\r\n                  <ColorSetter color={props.colors[index]} setColor={props.setColor} index={index} />\r\n                  &nbsp;\r\n                  {index+1}. {task}\r\n                </ListGroup.Item>\r\n              )}\r\n              <ListGroup.Item\r\n                  variant={props.theme}\r\n                  style={{display: \"flex\", alignItems: \"center\"}}>\r\n                <ColorSetter color={props.noneColor} setColor={props.setColor} index={-1} />\r\n                &nbsp;\r\n                No Task\r\n              </ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n      </CardColumns>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class EntryForm extends React.Component<{tasks:string[], updateEntries:Function}, any>{\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n      task: \"placeholder\",\r\n      date: `${new Date().getFullYear()}-${(new Date().getMonth()+1).toString().padStart(2, '0')}-${new Date().getDate()}`,\r\n      validation: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange(e:any){\r\n    let { name, value } = e.target;\r\n    e.preventDefault();\r\n\r\n    if(name === \"task\"){\r\n      this.setState({\r\n        validation: \"\"\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  submitEntry(){\r\n    if(this.state.task !== \"\" && this.state.task !== \"placeholder\"){\r\n      this.props.updateEntries({id:new Date(this.state.date).valueOf(), date: this.state.date, task: this.state.task});\r\n    } else {\r\n      this.setState({\r\n        validation: \"You must select a task\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Form>\r\n        {/** Date Picker */}\r\n        <Form.Group controlId=\"date-pick\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label>Date</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control as=\"input\" type=\"date\" \r\n                name=\"date\"\r\n                value={this.state.date} \r\n                onChange={(e)=>this.handleChange(e)}>\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        {/** Time Spent (TODO) */}\r\n\r\n        {/** Task Completed (select) */}\r\n        <Form.Group controlId=\"task-pick\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label>Task Completed</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control as=\"select\" \r\n                name=\"task\"\r\n                value={this.state.task}\r\n                onChange={(e)=>this.handleChange(e)}\r\n              >\r\n                <option value=\"placeholder\" disabled hidden>Select a Task</option>\r\n                {this.props.tasks && this.props.tasks.map((task)=>\r\n                  task !== \"\" &&\r\n                    <option key={task} value={task}>{task}</option>\r\n                )}\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Text className=\"text-muted\">\r\n              { this.state.validation }\r\n            </Form.Text>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" onClick={()=>this.submitEntry()}>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n// form for adding/editing tasks to the list of 10\r\nexport default class TaskForm extends React.Component<{tasks:string[], updateTasks:Function}, any>{\r\n  constructor(props:{tasks:string[], updateTasks:Function}){\r\n    super(props);\r\n    this.state = {\r\n      tasks:this.props.tasks,\r\n    }\r\n  }\r\n\r\n  onChange(e:any, index:number){\r\n    e.preventDefault();\r\n\r\n    let tasks = this.state.tasks;\r\n    tasks[index] = e.target.value;\r\n\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Form>\r\n        {this.state.tasks.map((task:string, index:number)=>\r\n          <Form.Group controlId={\"task-\" + index} key={\"task-\" + index}>\r\n            <div style={taskRow}>\r\n              <Form.Label style={{width: \"40px\", marginTop: \"5px\"}}>{index+1}.</Form.Label>\r\n              <Form.Control type=\"text\" value={task}  onChange={(e:any)=>this.onChange(e, index)} />\r\n            </div>\r\n          </Form.Group>\r\n        )}\r\n        <Button variant=\"primary\" onClick={()=>this.props.updateTasks(this.state.tasks)}>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nlet taskRow = {\r\n  display: \"flex\",\r\n  alignItems: \"center\"\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport EntryForm from './EntryForm';\r\nimport TasksForm from './TaskForm';\r\n\r\nexport default function Home(props:any){\r\n  let tasks = props.tasks;\r\n  return (\r\n    <Container fluid={true} style={ props.style }>\r\n      <CardColumns>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>Home Section</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <Card.Text>Here you can manage your tasks and submit a new entry.</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n          <Card.Header>\r\n            <Card.Title>New Entry</Card.Title>\r\n          </Card.Header>\r\n          <Card.Body>\r\n            <EntryForm tasks={tasks} updateEntries={props.updateEntries} />\r\n          </Card.Body>\r\n        </Card>\r\n        {tasks.length > 0 &&\r\n          <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n            <Card.Header>\r\n              <Card.Title>My Tasks</Card.Title>\r\n            </Card.Header>\r\n            <Card.Body>\r\n              <TasksForm tasks={tasks} updateTasks={props.updateTasks} />\r\n            </Card.Body>\r\n          </Card>\r\n        }\r\n      </CardColumns>\r\n    </Container>\r\n  );\r\n}","\r\nexport function dateString(date){\r\n  return months.get(date.getUTCMonth()) + \" \" + date.getUTCDate() + \", \" + date.getUTCFullYear();\r\n}\r\n\r\nexport function monthDays(month, year){\r\n  // this function should take month number as a 0-base!\r\n  let days = new Date(year, month+1, 0).getDate();\r\n  let res = [];\r\n  for(let i = 1; i<= days; i++){\r\n    res.push(i);\r\n  }\r\n  return res;\r\n}\r\n\r\nexport const months = new Map([\r\n  [0, \"Jan\"],\r\n  [1, \"Feb\"],\r\n  [2, \"Mar\"],\r\n  [3, \"Apr\"],\r\n  [4, \"May\"],\r\n  [5, \"Jun\"],\r\n  [6, \"Jul\"],\r\n  [7, \"Aug\"],\r\n  [8, \"Sep\"],\r\n  [9, \"Oct\"],\r\n  [10, \"Nov\"],\r\n  [11, \"Dec\"]\r\n]);\r\n\r\nexport const colors = [\r\n  \"#FF0000\", // red\r\n  \"#FFA500\", // orange\r\n  \"#FFFF00\", // yellow\r\n  \"#32CD32\", // limegreen\r\n  \"#008000\", // green\r\n  \"#ADD8E6\", // lightblue\r\n  \"#0000FF\", // blue\r\n  \"#8A2BE2\", // blueviolet\r\n  \"#800080\", // purple\r\n  \"#FFC0CB\" // pink\r\n];\r\n\r\nexport function stringifyArray(arr){\r\n  let res = \"\";\r\n  arr.forEach((item, index)=>{\r\n    res += item;\r\n    if(index < arr.length-1){\r\n      res += \"\\n\";\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function getWeekOfMonthNumber(dt){\r\n  let date = dt.getUTCDate();\r\n  let initDay = new Date(dt.setUTCDate(1)).getUTCDay();\r\n  let weekNum = 1;\r\n  let cDay = initDay;\r\n  for(let cDate = 1; cDate<date; cDate++){\r\n    if(cDay === 6){\r\n      cDay = 0;\r\n      weekNum++;\r\n    } else if(cDay < 6) {\r\n      cDay++;\r\n    }\r\n  }\r\n  return weekNum;\r\n}","import * as d3 from 'd3';\r\nimport * as helpers from './helpers';\r\n\r\nexport default function drawMonth(entries, tasks, height, width, monthIndex, colors, noneColor, theme){\r\n  if(!colors){\r\n    colors = helpers.colors;\r\n  }\r\n  if(!noneColor){\r\n    noneColor = \"lightgray\";\r\n  }\r\n  let textColor = theme === \"dark\" ? \"white\" : \"black\";\r\n  /** CLEAR EXISTING CONTENT */\r\n  d3.select(\"#chart\").html(\"\");\r\n  if(!monthIndex) monthIndex = 0;\r\n  if(monthIndex > 11) monthIndex = 11;\r\n  tasks = tasks.filter(task => task !== \"\");\r\n  /** SIZING & SCALE */\r\n  let cellpadding = 10;\r\n  let cellsize = 50;\r\n  let legendblock = 20;\r\n  let legendpad = 5;\r\n  let legendPosX = (cellsize*7)+(cellpadding*8)+cellpadding;\r\n  /** SVG */\r\n  let svg = d3.select(\"#chart\")\r\n    .append('svg')\r\n    .attr(\"height\", height)\r\n    .attr(\"width\", width);\r\n  /** CHART */\r\n  let filtered = entries.filter((entry)=> monthIndex === new Date(entry.id).getUTCMonth());\r\n  let data = [];\r\n  let year = new Date().getUTCFullYear();\r\n  helpers.monthDays(monthIndex, year).forEach((day)=>{\r\n    if(filtered.length > 0){\r\n      let entryIndex = filtered.findIndex((entry)=>new Date(entry.id).getUTCDate() === day);\r\n      if(entryIndex !== -1){\r\n        data.push({day: day, entry: filtered[entryIndex]});\r\n      } else {\r\n        data.push({day: day, entry: {id:new Date(year, monthIndex, day), tasks: []}});\r\n      }\r\n    } else {\r\n      data.push({day: day, entry: {id: new Date(year, monthIndex, day), tasks: []}});\r\n    }\r\n  });\r\n  \r\n  svg.append(\"g\")\r\n    .selectAll(\"text\")\r\n    .data([\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"]).enter()\r\n    .append(\"text\")\r\n    .text((d)=>d)\r\n    .style(\"fill\", textColor)\r\n    .attr(\"x\", (d, i)=>i*(cellsize+cellpadding)+(cellsize/2))\r\n    .attr(\"y\", 35)\r\n    .attr(\"font-size\", \"24\");\r\n\r\n  let cell = svg.selectAll(\"rect\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .attr(\"class\", \"cell\")\r\n    .attr(\"x\", (d)=> new Date(d.entry.id).getUTCDay()*(cellsize+cellpadding)+cellpadding)\r\n    .attr(\"y\", (d)=> (helpers.getWeekOfMonthNumber(new Date(d.entry.id))-1)*(cellsize+cellpadding)+60)\r\n    .attr(\"height\", cellsize)\r\n    .attr(\"width\", cellsize)\r\n    .attr(\"rx\", 5)\r\n    .style(\"fill\", (d)=>{\r\n        let i = tasks.indexOf(d.entry.tasks[0]);\r\n        return i !== -1 ? colors[i] : noneColor;\r\n      });\r\n  \r\n  cell.append(\"svg:title\")\r\n    .text((d)=>helpers.dateString(new Date(d.entry.id)) + \"\\n\" + (d.entry.tasks.length < 0 ? helpers.stringifyArray(d.entry.tasks) : \"\"))\r\n\r\n  /** LEGEND */\r\n  let legend = svg.append(\"g\")\r\n    .attr(\"id\",\"legend\")\r\n    .attr(\"height\", (legendblock+legendpad)*tasks.length)\r\n    .attr(\"width\", 100)\r\n    .attr(\"transform\", `translate(${legendPosX},20)`);\r\n  tasks.forEach((task, index)=>{\r\n    legend.append(\"rect\")\r\n      .attr(\"x\",0)\r\n      .attr(\"y\",(legendblock*index)+(legendpad*index))\r\n      .attr(\"height\",legendblock)\r\n      .attr(\"width\",legendblock)\r\n      .style(\"fill\", ()=>colors[index])\r\n      .style(\"stroke\", textColor);\r\n    legend.append(\"text\")\r\n      .text(task)\r\n      .style(\"fill\", textColor)\r\n      .attr(\"x\",legendblock+legendpad)\r\n      .attr(\"y\",(legendblock*index)+(legendpad*index)+15)\r\n      .attr(\"height\",20);\r\n  });\r\n  legend.append(\"rect\")\r\n    .attr(\"x\",0)\r\n    .attr(\"y\",(legendblock*tasks.length)+(legendpad*tasks.length))\r\n    .attr(\"height\",legendblock)\r\n    .attr(\"width\",legendblock)\r\n    .style(\"fill\", noneColor)\r\n    .style(\"stroke\", textColor);\r\n  legend.append(\"text\")\r\n    .text(\"No activity\")\r\n    .style(\"fill\", textColor)\r\n    .attr(\"x\",legendblock+legendpad)\r\n    .attr(\"y\",(legendblock*tasks.length)+(legendpad*tasks.length)+15)\r\n    .attr(\"height\",20);\r\n}\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Form from 'react-bootstrap/Form';\r\nimport drawMonth from './charts/drawMonth';\r\n\r\nexport default function Chart(props:any) {\r\n  const [month, setMonth] = React.useState(new Date().getMonth());\r\n  let width = 600;\r\n  let height = width * .7;\r\n  drawMonth(props.entries, props.tasks, height, width, month, props.colors, props.noneColor, props.theme);\r\n  return (\r\n    <Container fluid={true} style={ props.style }>\r\n      <Card bg={props.theme} style={{color: props.theme === \"dark\" ? \"white\" : \"black\"}}>\r\n        <Card.Header>\r\n          <Card.Title>Chart section</Card.Title>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <Form.Control as=\"select\" name=\"month\" \r\n            value={month.toString()}\r\n            onChange={(e:any)=>{e.preventDefault(); setMonth(parseInt(e.target.value));}}\r\n          >\r\n            <option value=\"0\">January</option>\r\n            <option value=\"1\">February</option>\r\n            <option value=\"2\">March</option>\r\n            <option value=\"3\">April</option>\r\n            <option value=\"4\">May</option>\r\n            <option value=\"5\">June</option>\r\n            <option value=\"6\">July</option>\r\n            <option value=\"7\">August</option>\r\n            <option value=\"8\">September</option>\r\n            <option value=\"9\">October</option>\r\n            <option value=\"10\">November</option>\r\n            <option value=\"11\">December</option>\r\n          </Form.Control>\r\n          <div id=\"chart\" />\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}","\r\nfunction initIDB(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=> {\r\n    // dbName will be the DB name, storeName will be the store name.\r\n    if(!('indexedDB' in window)){\r\n      console.warn(\"This browser doesn't support IndexedDB\");\r\n      return;\r\n    }\r\n    // create or open IndexedDB\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    // handle errors\r\n    request.onerror = function(event:any){\r\n      console.error(\"IndexedDB Error: \", request.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n\r\n    // handle db upgrades\r\n    request.onupgradeneeded = function(event:any) {\r\n      // save the IDBDatabase interface\r\n      let db = event.target.result;\r\n      let successCount = 0;\r\n      // Create an objectStore for the database\r\n      objectStoreNames.forEach((name, index)=>{\r\n        updgradeDB(db, name).then(()=>{\r\n          successCount++;\r\n        }).catch((message)=>{\r\n          console.error(message);\r\n        }).finally(()=>{\r\n          if(index+1 === objectStoreNames.length){\r\n            console.log(\"Reached end of foreach:\",index+1, objectStoreNames.length)\r\n            if(objectStoreNames.length === successCount){\r\n              resolve(\"Database access granted\");\r\n            } else {\r\n              reject(\"Database access rejected\");\r\n            }\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let curVer = event.target.result.version;\r\n      if(curVer === dbVersion){\r\n        resolve('success');\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction updgradeDB(db:any, name:string){\r\n  return new Promise((resolve, reject)=>{\r\n    let store = db.createObjectStore(\r\n      name,\r\n      {keyPath:'id',autoIncrement:true}\r\n    );\r\n\r\n    store.onerror = () => {\r\n      console.error(\"store not created, error: \",store.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n    store.onsuccess = () =>{\r\n      resolve(`Store ${name} created successfully`);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getAll(dbName:string, dbVersion:number, objectStoreName:string):Promise<object[]|string>{\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.getAll();\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction getOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.get(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateMany(dbName:string, dbVersion:number, objectStoreName:string, items:any[]) {\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq;\r\n      items.forEach((item:any) => {\r\n        objStoreReq = store.put(item);\r\n        \r\n        objStoreReq.onerror = function(event) {\r\n          reject(\"Error storing item \"+item);\r\n        };\r\n      });\r\n\r\n      transaction.oncomplete = function(event) {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateOne(dbName:string, dbVersion:number, objectStoreName:string, item:any){\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      store.put(item);\r\n\r\n      transaction.oncomplete = (event:any) => {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.delete(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(\"Item was deleted\");\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete entry\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteAll(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n\r\n      objectStoreNames.forEach((name)=>{\r\n        let transaction = db.transaction(name, 'readwrite');\r\n        let store = transaction.objectStore(name);\r\n        let objStoreReq = store.clear();\r\n  \r\n        objStoreReq.onsuccess = (event:any) => {\r\n          let message = \"Data has been successfully deleted\";\r\n          resolve(message);\r\n        };\r\n  \r\n        objStoreReq.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n\r\n        transaction.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n      });\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete data\");\r\n    };\r\n  });\r\n}\r\nlet iDB = {\r\n  init: initIDB,\r\n  getAll: getAll,\r\n  getOne: getOne,\r\n  addOrUpdateMany: addOrUpdateMany, \r\n  addOrUpdateOne: addOrUpdateOne, \r\n  deleteOne: deleteOne, \r\n  deleteAll: deleteAll\r\n};\r\nexport default iDB;","import React from 'react';\r\nimport Cookies from 'js-cookie';\r\nimport Navigation from './components/Nav';\r\nimport Settings from './components/Settings';\r\nimport Home from './components/Home';\r\nimport Chart from './components/Chart';\r\nimport iDB from './data/indexedDb';\r\n\r\nlet dbName = \"10for20\";\r\nlet store = {\r\n  tasks: \"tasks\",\r\n  entries: \"entries\"\r\n};\r\nconst DB_VER = 1;\r\n\r\nexport default class App extends React.Component<any,any> {\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n      section: \"home\",\r\n      tasks: [],\r\n      entries: [],\r\n      theme: \"light\",\r\n      colors: [\r\n        \"#FF0000\", // red\r\n        \"#FFA500\", // orange\r\n        \"#FFFF00\", // yellow\r\n        \"#32CD32\", // limegreen\r\n        \"#008000\", // green\r\n        \"#ADD8E6\", // lightblue\r\n        \"#0000FF\", // blue\r\n        \"#8A2BE2\", // blueviolet\r\n        \"#800080\", // purple\r\n        \"#FFC0CB\" // pink\r\n      ],\r\n      noneColor: \"#D3D3D3\"\r\n    };\r\n    this.setSection = this.setSection.bind(this);\r\n    this.setTheme = this.setTheme.bind(this);\r\n    this.updateTasks = this.updateTasks.bind(this);\r\n    this.addEntry = this.addEntry.bind(this);\r\n    this.setColor = this.setColor.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    let theme = Cookies.get('theme') || this.state.theme;\r\n    let noneColor = Cookies.get('noneColor') || this.state.noneColor;\r\n    let colors:any[] = [];\r\n    // FUTURE: When updating # of tasks, \r\n    //    the number for this loop needs to be adjusted.\r\n    \r\n    for(let i=0; i< 10; i++){\r\n      let color = Cookies.get(`color-${i}`);\r\n      colors.push(color ? color : this.state.colors[i]);\r\n    }\r\n    \r\n    this.setState({\r\n      theme: theme,\r\n      colors: colors,\r\n      noneColor: noneColor\r\n    });\r\n     \r\n    this.getData();\r\n  }\r\n\r\n  async getData(){\r\n    let db;\r\n    let tasks;\r\n    let entries;\r\n    try {\r\n      db = await iDB.init(dbName, DB_VER, [store.tasks, store.entries]);\r\n    } catch(e) {\r\n      console.error(e);\r\n    }\r\n    if(db){\r\n      try {\r\n        let res = await iDB.getOne(dbName, DB_VER, store.tasks, 1);\r\n        if(res){\r\n          tasks = (res as any).tasks;\r\n        }\r\n      } catch(e) {\r\n        console.error(e);\r\n      }\r\n      try {\r\n        entries = await iDB.getAll(dbName, DB_VER, store.entries);\r\n      } catch(e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if(!tasks){\r\n      tasks = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n    }\r\n    if(!entries){\r\n      entries = [];\r\n    }\r\n    this.setState({\r\n      tasks: tasks,\r\n      entries: entries\r\n    })\r\n  }\r\n\r\n  setSection(section:string) {\r\n    this.setState({\r\n      section:section\r\n    });\r\n  }\r\n\r\n  setTheme(theme:string) {\r\n    this.setState({\r\n      theme: theme\r\n    });\r\n    Cookies.set('theme', theme, {expires: 30, path: ''});\r\n  }\r\n\r\n  updateTasks(tasks:any){\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.tasks, {id:1, tasks:tasks})\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  addEntry(entry:any){\r\n    let entries = this.state.entries;\r\n    let index = entries.findIndex((item:any)=> item.id === entry.id);\r\n    if(index === -1){\r\n      entry.tasks = [entry.task];\r\n      delete entry.task;\r\n      entries.push(entry);\r\n      index = entries.length-1;\r\n    } else {\r\n      entries[index].tasks.push(entry.task);\r\n    }\r\n    this.setState({\r\n      entries: entries\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.entries, entries[index])\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  setColor(color:string, index:number){\r\n    if(index > -1){\r\n      let colors = this.state.colors;\r\n      colors[index] = color;\r\n      this.setState({\r\n        colors: colors\r\n      });\r\n      Cookies.set(`color-${index}`, color, {expires: 30, path: ''});\r\n    } else {\r\n      this.setState({\r\n        noneColor: color\r\n      });\r\n      Cookies.set('noneColor', color, {expires: 30, path: ''});\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n        <Navigation\r\n          current=\"Current\" \r\n          bg={this.state.theme} \r\n          textTheme={this.state.theme}\r\n          setSection={this.setSection} />\r\n        <div style={{...pageBg, backgroundColor: this.state.theme === \"light\" ? lightBG : darkBG}}>\r\n        <Home \r\n          style={{display: this.state.section === \"home\" ? \"block\" : \"none\"}} \r\n          theme={this.state.theme}\r\n          tasks={this.state.tasks} updateTasks={this.updateTasks} updateEntries={this.addEntry} />\r\n        <Chart\r\n          style={{display: this.state.section === \"chart\" ? \"block\" : \"none\"}}\r\n          colors={this.state.colors}\r\n          theme={this.state.theme}\r\n          noneColor={this.state.noneColor}\r\n          tasks={this.state.tasks} entries={this.state.entries} updateTasks={this.updateTasks} />\r\n        <Settings \r\n          style={{display: this.state.section === \"settings\" ? \"block\" : \"none\"}}\r\n          colors={this.state.colors}\r\n          noneColor={this.state.noneColor}\r\n          tasks={this.state.tasks}\r\n          setTheme={this.setTheme}\r\n          theme={this.state.theme}\r\n          setColor={this.setColor} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst pageBg = {\r\n  minHeight: \"100vh\",\r\n  padding: \"20px\",\r\n  paddingTop: \"76px\"\r\n};\r\n\r\nconst lightBG = \"rgba(0,0,0,.1)\";\r\nconst darkBG = \"hsl(208, 8%, 30%)\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceworker';\r\n//import 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById(\"react-app\")\r\n );\r\n\r\n // If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}