{"version":3,"sources":["components/Nav.tsx","components/Settings.tsx","components/EntryForm.tsx","components/TaskForm.tsx","components/Home.tsx","components/charts/helpers.js","components/charts/drawMonth.js","components/Chart.tsx","data/indexedDb.ts","App.tsx","serviceworker.ts","index.tsx"],"names":["Navigation","props","Navbar","bg","variant","textTheme","fixed","Brand","onClick","setSection","Toggle","aria-controls","Collapse","id","Nav","className","defaultActiveKey","Link","eventKey","icon","faBell","Settings","Container","fluid","style","CardColumns","Card","Body","Title","ListGroup","Item","active","disabled","Text","tasks","map","task","index","key","EntryForm","state","date","Date","getFullYear","getMonth","toString","padStart","getDate","validation","e","target","name","value","preventDefault","this","setState","updateEntries","valueOf","Form","Group","controlId","Row","Col","Label","Control","as","type","onChange","handleChange","hidden","Button","submitEntry","React","Component","TaskForm","taskRow","width","marginTop","updateTasks","display","Home","length","months","Map","colors","drawMonth","entries","height","monthIndex","d3","html","filter","svg","append","attr","filtered","entry","getUTCMonth","data","year","getUTCFullYear","month","days","res","i","push","helpers","forEach","day","entryIndex","findIndex","getUTCDate","selectAll","enter","text","d","cellsize","getUTCDay","dt","weekNum","cDay","setUTCDate","cDate","indexOf","get","arr","item","legend","legendblock","Chart","iDB","init","dbName","dbVersion","objectStoreNames","Promise","resolve","reject","window","request","indexedDB","open","onerror","event","console","error","onupgradeneeded","db","result","successCount","store","createObjectStore","keyPath","autoIncrement","onsuccess","updgradeDB","then","catch","message","finally","log","version","warn","getAll","objectStoreName","transaction","objStoreReq","objectStore","getOne","addOrUpdateMany","items","put","oncomplete","addOrUpdateOne","deleteOne","delete","deleteAll","clear","App","section","bind","addEntry","getData","current","pageBg","backgroundColor","minHeight","padding","paddingTop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e2659e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons';\r\n\r\nexport default function Navigation(props:any) {\r\n  return(\r\n    <Navbar bg={props.bg} variant={props.textTheme} fixed=\"top\">\r\n      <Navbar.Brand onClick={()=>props.setSection(\"home\")}>#10For20Challenge</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\" variant=\"pills\" defaultActiveKey=\"home\">\r\n          <Nav.Link onClick={()=>props.setSection(\"home\")} eventKey=\"home\">Home</Nav.Link>\r\n          <Nav.Link onClick={()=>props.setSection(\"chart\")} eventKey=\"chart\">Chart</Nav.Link>\r\n          <Nav.Link onClick={()=>props.setSection(\"settings\")} eventKey=\"settings\">Settings</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <FontAwesomeIcon icon={faBell} />\r\n    </Navbar>\r\n  );\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\n\r\nexport default function Settings(props:any){\r\n  return(\r\n    <Container fluid={true} style={ props.style }>\r\n      <CardColumns>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Page Theme</Card.Title>\r\n            <ListGroup>\r\n              <ListGroup.Item active>Light</ListGroup.Item>\r\n              <ListGroup.Item disabled>Dark</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Colors &amp; Patterns</Card.Title>\r\n            <Card.Text>This will be accordion groups once options are available.</Card.Text>\r\n            <ListGroup>\r\n              <ListGroup.Item active>Colors</ListGroup.Item>\r\n              <ListGroup.Item disabled>Patterns</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Chart Formats</Card.Title>\r\n            <ListGroup>\r\n              <ListGroup.Item active>Monthly</ListGroup.Item>\r\n              <ListGroup.Item disabled>Weekly</ListGroup.Item>\r\n              <ListGroup.Item disabled>Calendar View</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Tasks</Card.Title>\r\n            <ListGroup>\r\n              {props.tasks && props.tasks.map((task:string, index:number)=>\r\n                <ListGroup.Item key={`task-${index}`}>{index+1}. {task}</ListGroup.Item>\r\n              )}\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n      </CardColumns>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class EntryForm extends React.Component<{tasks:string[], updateEntries:Function}, any>{\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n      task: \"placeholder\",\r\n      date: `${new Date().getFullYear()}-${(new Date().getMonth()+1).toString().padStart(2, '0')}-${new Date().getDate()}`,\r\n      validation: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange(e:any){\r\n    let { name, value } = e.target;\r\n    e.preventDefault();\r\n\r\n    if(name === \"task\"){\r\n      this.setState({\r\n        validation: \"\"\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  submitEntry(){\r\n    if(this.state.task !== \"\" && this.state.task !== \"placeholder\"){\r\n      this.props.updateEntries({id:new Date(this.state.date).valueOf(), date: this.state.date, task: this.state.task});\r\n    } else {\r\n      this.setState({\r\n        validation: \"You must select a task\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Form>\r\n        {/** Date Picker */}\r\n        <Form.Group controlId=\"date-pick\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label>Date</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control as=\"input\" type=\"date\" \r\n                name=\"date\"\r\n                value={this.state.date} \r\n                onChange={(e)=>this.handleChange(e)}>\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        {/** Time Spent (TODO) */}\r\n\r\n        {/** Task Completed (select) */}\r\n        <Form.Group controlId=\"task-pick\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label>Task Completed</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control as=\"select\" \r\n                name=\"task\"\r\n                value={this.state.task}\r\n                onChange={(e)=>this.handleChange(e)}\r\n              >\r\n                <option value=\"placeholder\" disabled hidden>Select a Task</option>\r\n                {this.props.tasks && this.props.tasks.map((task)=>\r\n                  task !== \"\" &&\r\n                    <option key={task} value={task}>{task}</option>\r\n                )}\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Text className=\"text-muted\">\r\n              { this.state.validation }\r\n            </Form.Text>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" onClick={()=>this.submitEntry()}>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n// form for adding/editing tasks to the list of 10\r\nexport default class TaskForm extends React.Component<{tasks:string[], updateTasks:Function}, any>{\r\n  constructor(props:{tasks:string[], updateTasks:Function}){\r\n    super(props);\r\n    this.state = {\r\n      tasks:this.props.tasks,\r\n    }\r\n  }\r\n\r\n  onChange(e:any, index:number){\r\n    e.preventDefault();\r\n\r\n    let tasks = this.state.tasks;\r\n    tasks[index] = e.target.value;\r\n\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Form>\r\n        {this.state.tasks.map((task:string, index:number)=>\r\n          <Form.Group controlId={\"task-\" + index} key={\"task-\" + index}>\r\n            <div style={taskRow}>\r\n              <Form.Label style={{width: \"40px\", marginTop: \"5px\"}}>#{index+1}</Form.Label>\r\n              <Form.Control type=\"text\" value={task}  onChange={(e:any)=>this.onChange(e, index)} />\r\n            </div>\r\n          </Form.Group>\r\n        )}\r\n        <Button variant=\"primary\" onClick={()=>this.props.updateTasks(this.state.tasks)}>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nlet taskRow = {\r\n  display: \"flex\"\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport EntryForm from './EntryForm';\r\nimport TasksForm from './TaskForm';\r\n\r\nexport default function Home(props:any){\r\n  let tasks = props.tasks;\r\n  return (\r\n    <Container fluid={true} style={ props.style }>\r\n      <CardColumns>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Home Section</Card.Title>\r\n            <Card.Text>Here you can manage your tasks and submit a new entry.</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>New Entry</Card.Title>\r\n            <EntryForm tasks={tasks} updateEntries={props.updateEntries} />\r\n          </Card.Body>\r\n        </Card>\r\n        {tasks.length > 0 &&\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Title>My Tasks</Card.Title>\r\n              <TasksForm tasks={tasks} updateTasks={props.updateTasks} />\r\n            </Card.Body>\r\n          </Card>\r\n        }\r\n      </CardColumns>\r\n    </Container>\r\n  );\r\n}","\r\nexport function dateString(date){\r\n  return months.get(date.getUTCMonth()) + \" \" + date.getUTCDate() + \", \" + date.getUTCFullYear();\r\n}\r\n\r\nexport function monthDays(month, year){\r\n  // this function should take month number as a 0-base!\r\n  let days = new Date(year, month+1, 0).getDate();\r\n  let res = [];\r\n  for(let i = 1; i<= days; i++){\r\n    res.push(i);\r\n  }\r\n  return res;\r\n}\r\n\r\nexport const months = new Map([\r\n  [0, \"Jan\"],\r\n  [1, \"Feb\"],\r\n  [2, \"Mar\"],\r\n  [3, \"Apr\"],\r\n  [4, \"May\"],\r\n  [5, \"Jun\"],\r\n  [6, \"Jul\"],\r\n  [7, \"Aug\"],\r\n  [8, \"Sep\"],\r\n  [9, \"Oct\"],\r\n  [10, \"Nov\"],\r\n  [11, \"Dec\"]\r\n]);\r\n\r\nexport const colors = [\r\n  \"red\",\r\n  \"orange\",\r\n  \"yellow\",\r\n  \"limegreen\",\r\n  \"green\",\r\n  \"lightblue\",\r\n  \"blue\",\r\n  \"violet\",\r\n  \"purple\",\r\n  \"pink\"\r\n];\r\n\r\nexport function stringifyArray(arr){\r\n  let res = \"\";\r\n  arr.forEach((item, index)=>{\r\n    res += item;\r\n    if(index < arr.length-1){\r\n      res += \"\\n\";\r\n    }\r\n  });\r\n  return res;\r\n}\r\n\r\nexport function getWeekOfMonthNumber(dt){\r\n  let date = dt.getUTCDate();\r\n  let initDay = new Date(dt.setUTCDate(1)).getUTCDay();\r\n  let weekNum = 1;\r\n  let cDay = initDay;\r\n  for(let cDate = 1; cDate<date; cDate++){\r\n    if(cDay === 6){\r\n      cDay = 0;\r\n      weekNum++;\r\n    } else if(cDay < 6) {\r\n      cDay++;\r\n    }\r\n  }\r\n  return weekNum;\r\n}","import * as d3 from 'd3';\r\nimport * as helpers from './helpers';\r\n\r\nexport default function drawMonth(entries, tasks, height, width, monthIndex){\r\n  /** CLEAR EXISTING CONTENT */\r\n  d3.select(\"#chart\").html(\"\");\r\n  if(!monthIndex) monthIndex = 0;\r\n  if(monthIndex > 11) monthIndex = 11;\r\n  tasks = tasks.filter(task => task !== \"\");\r\n  /** SIZING & SCALE */\r\n  let cellpadding = 10;\r\n  let cellsize = 50;\r\n  let legendblock = 20;\r\n  let legendpad = 5;\r\n  let legendPosX = (cellsize*7)+(cellpadding*8)+cellpadding;\r\n  /** SVG */\r\n  let svg = d3.select(\"#chart\")\r\n    .append('svg')\r\n    .attr(\"height\", height)\r\n    .attr(\"width\", width);\r\n  /** CHART */\r\n  let filtered = entries.filter((entry)=> monthIndex === new Date(entry.id).getUTCMonth());\r\n  let data = [];\r\n  let year = new Date().getUTCFullYear();\r\n  helpers.monthDays(monthIndex, year).forEach((day)=>{\r\n    if(filtered.length > 0){\r\n      let entryIndex = filtered.findIndex((entry)=>new Date(entry.id).getUTCDate() === day);\r\n      if(entryIndex !== -1){\r\n        data.push({day: day, entry: filtered[entryIndex]});\r\n      } else {\r\n        data.push({day: day, entry: {id:new Date(year, monthIndex, day), tasks: []}});\r\n      }\r\n    } else {\r\n      data.push({day: day, entry: {id: new Date(year, monthIndex, day), tasks: []}});\r\n    }\r\n  });\r\n  \r\n  svg.append(\"g\")\r\n    .selectAll(\"text\")\r\n    .data([\"S\",\"M\",\"T\",\"W\",\"T\",\"F\",\"S\"]).enter()\r\n    .append(\"text\")\r\n    .text((d)=>d)\r\n    .attr(\"x\", (d, i)=>i*(cellsize+cellpadding)+(cellsize/2))\r\n    .attr(\"y\", 35)\r\n    .attr(\"font-size\", \"24\");\r\n\r\n  let cell = svg.selectAll(\"rect\")\r\n    .data(data)\r\n    .enter()\r\n    .append(\"rect\")\r\n    .attr(\"class\", \"cell\")\r\n    .attr(\"x\", (d)=> new Date(d.entry.id).getUTCDay()*(cellsize+cellpadding)+cellpadding)\r\n    .attr(\"y\", (d)=> (helpers.getWeekOfMonthNumber(new Date(d.entry.id))-1)*(cellsize+cellpadding)+60)\r\n    .attr(\"height\", cellsize)\r\n    .attr(\"width\", cellsize)\r\n    .attr(\"rx\", 5)\r\n    .style(\"fill\", (d)=>{\r\n        let i = tasks.indexOf(d.entry.tasks[0]);\r\n        return i !== -1 ? helpers.colors[i] : \"lightgrey\";\r\n      });\r\n  \r\n  cell.append(\"svg:title\")\r\n    .text((d)=>helpers.dateString(new Date(d.entry.id)) + \"\\n\" + (d.entry.tasks.length < 0 ? helpers.stringifyArray(d.entry.tasks) : \"\"))\r\n\r\n  /** LEGEND */\r\n  let legend = svg.append(\"g\")\r\n    .attr(\"id\",\"legend\")\r\n    .attr(\"height\", (legendblock+legendpad)*tasks.length)\r\n    .attr(\"width\", 100)\r\n    .attr(\"transform\", `translate(${legendPosX},20)`);\r\n  tasks.forEach((task, index)=>{\r\n    legend.append(\"rect\")\r\n      .attr(\"x\",0)\r\n      .attr(\"y\",(legendblock*index)+(legendpad*index))\r\n      .attr(\"height\",legendblock)\r\n      .attr(\"width\",legendblock)\r\n      .style(\"fill\", ()=>helpers.colors[index])\r\n      .style(\"stroke\", \"black\");\r\n    legend.append(\"text\")\r\n      .text(task)\r\n      .attr(\"x\",legendblock+legendpad)\r\n      .attr(\"y\",(legendblock*index)+(legendpad*index)+15)\r\n      .attr(\"height\",20);\r\n  });\r\n  legend.append(\"rect\")\r\n    .attr(\"x\",0)\r\n    .attr(\"y\",(legendblock*tasks.length)+(legendpad*tasks.length))\r\n    .attr(\"height\",legendblock)\r\n    .attr(\"width\",legendblock)\r\n    .style(\"fill\", \"lightgrey\")\r\n    .style(\"stroke\", \"black\");\r\n  legend.append(\"text\")\r\n    .text(\"No activity\")\r\n    .attr(\"x\",legendblock+legendpad)\r\n    .attr(\"y\",(legendblock*tasks.length)+(legendpad*tasks.length)+15)\r\n    .attr(\"height\",20);\r\n}\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport drawMonth from './charts/drawMonth';\r\n\r\nexport default function Chart(props:any) {\r\n  let width = 600;\r\n  let height = width * .7;\r\n  drawMonth(props.entries, props.tasks, height, width, new Date().getMonth());\r\n  return (\r\n    <Container fluid={true} style={ props.style }>\r\n      <Card>\r\n        <Card.Body>\r\n          <Card.Title>Chart section</Card.Title>\r\n          <div id=\"chart\" />\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}","\r\nfunction initIDB(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=> {\r\n    // dbName will be the DB name, storeName will be the store name.\r\n    if(!('indexedDB' in window)){\r\n      console.warn(\"This browser doesn't support IndexedDB\");\r\n      return;\r\n    }\r\n    // create or open IndexedDB\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    // handle errors\r\n    request.onerror = function(event:any){\r\n      console.error(\"IndexedDB Error: \", request.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n\r\n    // handle db upgrades\r\n    request.onupgradeneeded = function(event:any) {\r\n      // save the IDBDatabase interface\r\n      let db = event.target.result;\r\n      let successCount = 0;\r\n      // Create an objectStore for the database\r\n      objectStoreNames.forEach((name, index)=>{\r\n        updgradeDB(db, name).then(()=>{\r\n          successCount++;\r\n        }).catch((message)=>{\r\n          console.error(message);\r\n        }).finally(()=>{\r\n          if(index+1 === objectStoreNames.length){\r\n            console.log(\"Reached end of foreach:\",index+1, objectStoreNames.length)\r\n            if(objectStoreNames.length === successCount){\r\n              resolve(\"Database access granted\");\r\n            } else {\r\n              reject(\"Database access rejected\");\r\n            }\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let curVer = event.target.result.version;\r\n      if(curVer === dbVersion){\r\n        resolve('success');\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction updgradeDB(db:any, name:string){\r\n  return new Promise((resolve, reject)=>{\r\n    let store = db.createObjectStore(\r\n      name,\r\n      {keyPath:'id',autoIncrement:true}\r\n    );\r\n\r\n    store.onerror = () => {\r\n      console.error(\"store not created, error: \",store.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n    store.onsuccess = () =>{\r\n      resolve(`Store ${name} created successfully`);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getAll(dbName:string, dbVersion:number, objectStoreName:string):Promise<object[]|string>{\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.getAll();\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction getOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.get(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateMany(dbName:string, dbVersion:number, objectStoreName:string, items:any[]) {\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq;\r\n      items.forEach((item:any) => {\r\n        objStoreReq = store.put(item);\r\n        \r\n        objStoreReq.onerror = function(event) {\r\n          reject(\"Error storing item \"+item);\r\n        };\r\n      });\r\n\r\n      transaction.oncomplete = function(event) {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateOne(dbName:string, dbVersion:number, objectStoreName:string, item:any){\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      store.put(item);\r\n\r\n      transaction.oncomplete = (event:any) => {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.delete(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(\"Item was deleted\");\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete entry\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteAll(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n\r\n      objectStoreNames.forEach((name)=>{\r\n        let transaction = db.transaction(name, 'readwrite');\r\n        let store = transaction.objectStore(name);\r\n        let objStoreReq = store.clear();\r\n  \r\n        objStoreReq.onsuccess = (event:any) => {\r\n          let message = \"Data has been successfully deleted\";\r\n          resolve(message);\r\n        };\r\n  \r\n        objStoreReq.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n\r\n        transaction.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n      });\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete data\");\r\n    };\r\n  });\r\n}\r\nlet iDB = {\r\n  init: initIDB,\r\n  getAll: getAll,\r\n  getOne: getOne,\r\n  addOrUpdateMany: addOrUpdateMany, \r\n  addOrUpdateOne: addOrUpdateOne, \r\n  deleteOne: deleteOne, \r\n  deleteAll: deleteAll\r\n};\r\nexport default iDB;","import React from 'react';\r\nimport Navigation from './components/Nav';\r\nimport Settings from './components/Settings';\r\nimport Home from './components/Home';\r\nimport Chart from './components/Chart';\r\nimport iDB from './data/indexedDb';\r\n\r\nlet dbName = \"10for20\";\r\nlet store = {\r\n  tasks: \"tasks\",\r\n  entries: \"entries\"\r\n};\r\nconst DB_VER = 1;\r\n\r\nexport default class App extends React.Component<any,any> {\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n      section: \"home\",\r\n      tasks: [],\r\n      entries: []\r\n    };\r\n    this.setSection = this.setSection.bind(this);\r\n    this.updateTasks = this.updateTasks.bind(this);\r\n    this.addEntry = this.addEntry.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  async getData(){\r\n    let db;\r\n    let tasks;\r\n    let entries;\r\n    try {\r\n      db = await iDB.init(dbName, DB_VER, [store.tasks, store.entries]);\r\n    } catch(e) {\r\n      console.error(e);\r\n    }\r\n    if(db){\r\n      try {\r\n        let res = await iDB.getOne(dbName, DB_VER, store.tasks, 1);\r\n        if(res){\r\n          tasks = (res as any).tasks;\r\n        }\r\n      } catch(e) {\r\n        console.error(e);\r\n      }\r\n      try {\r\n        entries = await iDB.getAll(dbName, DB_VER, store.entries);\r\n      } catch(e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if(!tasks){\r\n      tasks = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n    }\r\n    if(!entries){\r\n      entries = [];\r\n    }\r\n    this.setState({\r\n      tasks: tasks,\r\n      entries: entries\r\n    })\r\n  }\r\n\r\n  setSection(section:string) {\r\n    this.setState({\r\n      section:section\r\n    });\r\n  }\r\n\r\n  updateTasks(tasks:any){\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.tasks, {id:1, tasks:tasks})\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  addEntry(entry:any){\r\n    let entries = this.state.entries;\r\n    let index = entries.findIndex((item:any)=> item.id === entry.id);\r\n    if(index === -1){\r\n      entry.tasks = [entry.task];\r\n      delete entry.task;\r\n      entries.push(entry);\r\n      index = entries.length-1;\r\n    } else {\r\n      entries[index].tasks.push(entry.task);\r\n    }\r\n    this.setState({\r\n      entries: entries\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.entries, entries[index])\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <>\r\n        <Navigation\r\n          current=\"Current\" \r\n          bg=\"light\" \r\n          textTheme=\"light\"\r\n          setSection={this.setSection} />\r\n        <div style={pageBg}>\r\n        <Home \r\n          style={{display: this.state.section === \"home\" ? \"block\" : \"none\"}} \r\n          tasks={this.state.tasks} updateTasks={this.updateTasks} updateEntries={this.addEntry} />\r\n        <Chart\r\n          style={{display: this.state.section === \"chart\" ? \"block\" : \"none\"}}\r\n          tasks={this.state.tasks} entries={this.state.entries} updateTasks={this.updateTasks} />\r\n        <Settings \r\n          style={{display: this.state.section === \"settings\" ? \"block\" : \"none\"}}\r\n          tasks={this.state.tasks} />\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst pageBg = {\r\n  backgroundColor: \"lightgrey\",\r\n  minHeight: \"100vh\",\r\n  padding: \"20px\",\r\n  paddingTop: \"76px\"\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceworker';\r\n//import 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById(\"react-app\")\r\n );\r\n\r\n // If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}