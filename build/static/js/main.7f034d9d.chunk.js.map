{"version":3,"sources":["components/Nav.tsx","components/Settings.tsx","components/EntryForm.tsx","components/TaskForm.tsx","components/Home.tsx","components/Chart.tsx","data/indexedDb.ts","App.tsx","serviceworker.ts","index.tsx"],"names":["Navigation","props","Navbar","bg","variant","textTheme","fixed","Brand","onClick","setSection","Toggle","aria-controls","Collapse","id","Nav","className","defaultActiveKey","Link","eventKey","Settings","Container","fluid","style","CardColumns","Card","Body","Title","ListGroup","Item","active","disabled","Text","tasks","map","task","index","key","EntryForm","state","date","Date","getFullYear","getMonth","toString","padStart","getDate","validation","e","target","name","value","preventDefault","this","setState","updateEntries","Form","Group","controlId","Row","Col","Label","Control","as","type","onChange","handleChange","hidden","Button","submitEntry","React","Component","TaskForm","taskRow","width","marginTop","updateTasks","display","Home","length","Chart","JSON","stringify","entries","iDB","init","dbName","dbVersion","objectStoreNames","Promise","resolve","reject","window","request","indexedDB","open","onerror","event","console","error","onupgradeneeded","db","result","successCount","forEach","store","createObjectStore","keyPath","autoIncrement","onsuccess","updgradeDB","then","catch","message","finally","log","version","warn","getAll","objectStoreName","transaction","objStoreReq","objectStore","getOne","get","addOrUpdateMany","items","item","put","oncomplete","addOrUpdateOne","deleteOne","delete","deleteAll","clear","App","section","bind","addEntry","getData","res","entry","valueOf","push","current","pageBg","backgroundColor","height","padding","paddingTop","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f034d9d.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nexport default function Navigation(props:any) {\r\n  return(\r\n    <Navbar bg={props.bg} variant={props.textTheme} fixed=\"top\">\r\n      <Navbar.Brand onClick={()=>props.setSection(\"home\")}>#10For20Challenge</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"mr-auto\" variant=\"pills\" defaultActiveKey=\"home\">\r\n          <Nav.Link onClick={()=>props.setSection(\"home\")} eventKey=\"home\">Home</Nav.Link>\r\n          <Nav.Link onClick={()=>props.setSection(\"chart\")} eventKey=\"chart\">Chart</Nav.Link>\r\n          <Nav.Link onClick={()=>props.setSection(\"settings\")} eventKey=\"settings\">Settings</Nav.Link>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      <span>Notification Icon</span>\r\n    </Navbar>\r\n  );\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport ListGroup from 'react-bootstrap/ListGroup';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\n\r\nexport default function Settings(props:any){\r\n  return(\r\n    <Container fluid={true} style={ props.style }>\r\n      <CardColumns>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Page Theme</Card.Title>\r\n            <ListGroup>\r\n              <ListGroup.Item active>Light</ListGroup.Item>\r\n              <ListGroup.Item disabled>Dark</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Colors &amp; Patterns</Card.Title>\r\n            <Card.Text>This will be accordion groups once options are available.</Card.Text>\r\n            <ListGroup>\r\n              <ListGroup.Item active>Colors</ListGroup.Item>\r\n              <ListGroup.Item disabled>Patterns</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Chart Formats</Card.Title>\r\n            <ListGroup>\r\n              <ListGroup.Item active>Monthly</ListGroup.Item>\r\n              <ListGroup.Item disabled>Weekly</ListGroup.Item>\r\n              <ListGroup.Item disabled>Calendar View</ListGroup.Item>\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Tasks</Card.Title>\r\n            <ListGroup>\r\n              {props.tasks && props.tasks.map((task:string, index:number)=>\r\n                <ListGroup.Item key={`task-${index}`}>{index+1}. {task}</ListGroup.Item>\r\n              )}\r\n            </ListGroup>\r\n          </Card.Body>\r\n        </Card>\r\n      </CardColumns>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default class EntryForm extends React.Component<{tasks:string[], updateEntries:Function}, any>{\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n      task: \"placeholder\",\r\n      date: `${new Date().getFullYear()}-${(new Date().getMonth()+1).toString().padStart(2, '0')}-${new Date().getDate()}`,\r\n      validation: \"\"\r\n    };\r\n  }\r\n\r\n  handleChange(e:any){\r\n    let { name, value } = e.target;\r\n    e.preventDefault();\r\n\r\n    if(name === \"task\"){\r\n      this.setState({\r\n        validation: \"\"\r\n      });\r\n    }\r\n\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  submitEntry(){\r\n    if(this.state.task !== \"\" && this.state.task !== \"placeholder\"){\r\n      this.props.updateEntries({date:this.state.date, task: this.state.task});\r\n    } else {\r\n      this.setState({\r\n        validation: \"You must select a task\"\r\n      });\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Form>\r\n        {/** Date Picker */}\r\n        <Form.Group controlId=\"date-pick\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label>Date</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control as=\"input\" type=\"date\" \r\n                name=\"date\"\r\n                value={this.state.date} \r\n                onChange={(e)=>this.handleChange(e)}>\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        {/** Time Spent (TODO) */}\r\n\r\n        {/** Task Completed (select) */}\r\n        <Form.Group controlId=\"task-pick\">\r\n          <Form.Row>\r\n            <Col>\r\n              <Form.Label>Task Completed</Form.Label>\r\n            </Col>\r\n            <Col>\r\n              <Form.Control as=\"select\" \r\n                name=\"task\"\r\n                value={this.state.task}\r\n                onChange={(e)=>this.handleChange(e)}\r\n              >\r\n                <option value=\"placeholder\" disabled hidden>Select a Task</option>\r\n                {this.props.tasks && this.props.tasks.map((task)=>\r\n                  task !== \"\" &&\r\n                    <option key={task} value={task}>{task}</option>\r\n                )}\r\n              </Form.Control>\r\n            </Col>\r\n          </Form.Row>\r\n          <Form.Row>\r\n            <Form.Text className=\"text-muted\">\r\n              { this.state.validation }\r\n            </Form.Text>\r\n          </Form.Row>\r\n        </Form.Group>\r\n        <Button variant=\"primary\" onClick={()=>this.submitEntry()}>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}","import React from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n// form for adding/editing tasks to the list of 10\r\nexport default class TaskForm extends React.Component<{tasks:string[], updateTasks:Function}, any>{\r\n  constructor(props:{tasks:string[], updateTasks:Function}){\r\n    super(props);\r\n    this.state = {\r\n      tasks:this.props.tasks,\r\n    }\r\n  }\r\n\r\n  onChange(e:any, index:number){\r\n    e.preventDefault();\r\n\r\n    let tasks = this.state.tasks;\r\n    tasks[index] = e.target.value;\r\n\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <Form>\r\n        {this.state.tasks.map((task:string, index:number)=>\r\n          <Form.Group controlId={\"task-\" + index} key={\"task-\" + index}>\r\n            <div style={taskRow}>\r\n              <Form.Label style={{width: \"40px\", marginTop: \"5px\"}}>#{index+1}</Form.Label>\r\n              <Form.Control type=\"text\" value={task}  onChange={(e:any)=>this.onChange(e, index)} />\r\n            </div>\r\n          </Form.Group>\r\n        )}\r\n        <Button variant=\"primary\" onClick={()=>this.props.updateTasks(this.state.tasks)}>Submit</Button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nlet taskRow = {\r\n  display: \"flex\"\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\nimport CardColumns from 'react-bootstrap/CardColumns';\r\nimport EntryForm from './EntryForm';\r\nimport TasksForm from './TaskForm';\r\n\r\nexport default function Home(props:any){\r\n  let tasks = props.tasks;\r\n  return (\r\n    <Container fluid={true} style={ props.style }>\r\n      <CardColumns>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>Home Section</Card.Title>\r\n            <Card.Text>Here you can manage your tasks and submit a new entry.</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n        <Card>\r\n          <Card.Body>\r\n            <Card.Title>New Entry</Card.Title>\r\n            <EntryForm tasks={tasks} updateEntries={props.updateEntries} />\r\n          </Card.Body>\r\n        </Card>\r\n        {tasks.length > 0 &&\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Title>My Tasks</Card.Title>\r\n              <TasksForm tasks={tasks} updateTasks={props.updateTasks} />\r\n            </Card.Body>\r\n          </Card>\r\n        }\r\n      </CardColumns>\r\n    </Container>\r\n  );\r\n}","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nexport default function Chart(props:any) {\r\n  return (\r\n    <Container fluid={true} style={ props.style }>\r\n      <Card>\r\n        <Card.Body>\r\n          <Card.Title>Chart section</Card.Title>\r\n          {JSON.stringify(props.entries)}\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}","\r\nfunction initIDB(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=> {\r\n    // dbName will be the DB name, storeName will be the store name.\r\n    if(!('indexedDB' in window)){\r\n      console.warn(\"This browser doesn't support IndexedDB\");\r\n      return;\r\n    }\r\n    // create or open IndexedDB\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    // handle errors\r\n    request.onerror = function(event:any){\r\n      console.error(\"IndexedDB Error: \", request.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n\r\n    // handle db upgrades\r\n    request.onupgradeneeded = function(event:any) {\r\n      // save the IDBDatabase interface\r\n      let db = event.target.result;\r\n      let successCount = 0;\r\n      // Create an objectStore for the database\r\n      objectStoreNames.forEach((name, index)=>{\r\n        updgradeDB(db, name).then(()=>{\r\n          successCount++;\r\n        }).catch((message)=>{\r\n          console.error(message);\r\n        }).finally(()=>{\r\n          if(index+1 === objectStoreNames.length){\r\n            console.log(\"Reached end of foreach:\",index+1, objectStoreNames.length)\r\n            if(objectStoreNames.length === successCount){\r\n              resolve(\"Database access granted\");\r\n            } else {\r\n              reject(\"Database access rejected\");\r\n            }\r\n          }\r\n        });\r\n      });\r\n    };\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let curVer = event.target.result.version;\r\n      if(curVer === dbVersion){\r\n        resolve('success');\r\n      }\r\n    };\r\n  });\r\n}\r\n\r\nfunction updgradeDB(db:any, name:string){\r\n  return new Promise((resolve, reject)=>{\r\n    let store = db.createObjectStore(\r\n      name,\r\n      {keyPath:'id',autoIncrement:true}\r\n    );\r\n\r\n    store.onerror = () => {\r\n      console.error(\"store not created, error: \",store.error);\r\n      reject(\"Failed to open database\");\r\n    };\r\n    store.onsuccess = () =>{\r\n      resolve(`Store ${name} created successfully`);\r\n    }\r\n  });\r\n}\r\n\r\nfunction getAll(dbName:string, dbVersion:number, objectStoreName:string):Promise<object[]|string>{\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.getAll();\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction getOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve, reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.get(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(event.target.result);\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to get data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to get data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateMany(dbName:string, dbVersion:number, objectStoreName:string, items:any[]) {\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq;\r\n      items.forEach((item:any) => {\r\n        objStoreReq = store.put(item);\r\n        \r\n        objStoreReq.onerror = function(event) {\r\n          reject(\"Error storing item \"+item);\r\n        };\r\n      });\r\n\r\n      transaction.oncomplete = function(event) {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction addOrUpdateOne(dbName:string, dbVersion:number, objectStoreName:string, item:any){\r\n  return new Promise((resolve,reject) => {\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      store.put(item);\r\n\r\n      transaction.oncomplete = (event:any) => {\r\n        resolve(\"Data saved successfully\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Failed to save data\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Failed to save data\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteOne(dbName:string, dbVersion:number, objectStoreName:string, id:any){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n      let transaction = db.transaction(objectStoreName, 'readwrite');\r\n      let store = transaction.objectStore(objectStoreName);\r\n      let objStoreReq = store.delete(id);\r\n\r\n      objStoreReq.onsuccess = (event:any) => {\r\n        resolve(\"Item was deleted\");\r\n      };\r\n\r\n      objStoreReq.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n\r\n      transaction.onerror = (event:any) => {\r\n        reject(\"Unable to delete entry\");\r\n      };\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete entry\");\r\n    };\r\n  });\r\n}\r\n\r\nfunction deleteAll(dbName:string, dbVersion:number, objectStoreNames:string[]){\r\n  return new Promise((resolve,reject)=>{\r\n    let request = window.indexedDB.open(dbName, dbVersion);\r\n\r\n    request.onsuccess = (event:any) => {\r\n      let db = request.result;\r\n\r\n      objectStoreNames.forEach((name)=>{\r\n        let transaction = db.transaction(name, 'readwrite');\r\n        let store = transaction.objectStore(name);\r\n        let objStoreReq = store.clear();\r\n  \r\n        objStoreReq.onsuccess = (event:any) => {\r\n          let message = \"Data has been successfully deleted\";\r\n          resolve(message);\r\n        };\r\n  \r\n        objStoreReq.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n\r\n        transaction.onerror = (event:any) => {\r\n          reject(\"Unable to delete data\");\r\n        };\r\n      });\r\n    };\r\n\r\n    request.onerror = (event:any) => {\r\n      reject(\"Unable to delete data\");\r\n    };\r\n  });\r\n}\r\nlet iDB = {\r\n  init: initIDB,\r\n  getAll: getAll,\r\n  getOne: getOne,\r\n  addOrUpdateMany: addOrUpdateMany, \r\n  addOrUpdateOne: addOrUpdateOne, \r\n  deleteOne: deleteOne, \r\n  deleteAll: deleteAll\r\n};\r\nexport default iDB;","import React from 'react';\r\nimport Navigation from './components/Nav';\r\nimport Settings from './components/Settings';\r\nimport Home from './components/Home';\r\nimport Chart from './components/Chart';\r\nimport iDB from './data/indexedDb';\r\n\r\nlet dbName = \"10for20\";\r\nlet store = {\r\n  tasks: \"tasks\",\r\n  entries: \"entries\"\r\n};\r\nconst DB_VER = 1;\r\n\r\nexport default class App extends React.Component<any,any> {\r\n  constructor(props:any){\r\n    super(props);\r\n    this.state = {\r\n      section: \"home\",\r\n      tasks: [],\r\n      entries: []\r\n    };\r\n    this.setSection = this.setSection.bind(this);\r\n    this.updateTasks = this.updateTasks.bind(this);\r\n    this.addEntry = this.addEntry.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  async getData(){\r\n    let db;\r\n    let tasks;\r\n    let entries;\r\n    try {\r\n      db = await iDB.init(dbName, DB_VER, [store.tasks, store.entries]);\r\n    } catch(e) {\r\n      console.error(e);\r\n    }\r\n    if(db){\r\n      try {\r\n        let res = await iDB.getOne(dbName, DB_VER, store.tasks, 1);\r\n        if(res){\r\n          tasks = (res as any).tasks;\r\n        }\r\n      } catch(e) {\r\n        console.error(e);\r\n      }\r\n      try {\r\n        entries = await iDB.getAll(dbName, DB_VER, store.entries);\r\n      } catch(e) {\r\n        console.error(e);\r\n      }\r\n    }\r\n    if(!tasks){\r\n      tasks = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"];\r\n    }\r\n    if(!entries){\r\n      entries = [];\r\n    }\r\n    this.setState({\r\n      tasks: tasks,\r\n      entries: entries\r\n    })\r\n  }\r\n\r\n  setSection(section:string) {\r\n    this.setState({\r\n      section:section\r\n    });\r\n  }\r\n\r\n  updateTasks(tasks:any){\r\n    this.setState({\r\n      tasks: tasks\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.tasks, {id:1, tasks:tasks})\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  addEntry(entry:any){\r\n    entry.id = new Date().valueOf();\r\n    let entries = this.state.entries;\r\n    entries.push(entry);\r\n    this.setState({\r\n      entries: entries\r\n    });\r\n    iDB.addOrUpdateOne(dbName, DB_VER, store.entries, entry)\r\n    .then((message)=>{\r\n      console.log(message);\r\n    }).catch((message)=>{\r\n      console.error(message);\r\n    });\r\n  }\r\n\r\n  render(){\r\n    console.log(\"App state:\", this.state);\r\n    return(\r\n      <>\r\n        <Navigation\r\n          current=\"Current\" \r\n          bg=\"light\" \r\n          textTheme=\"light\"\r\n          setSection={this.setSection} />\r\n        { this.state.section === \"home\" &&\r\n          <Home style={pageBg} tasks={this.state.tasks} updateTasks={this.updateTasks} updateEntries={this.addEntry} />\r\n        }\r\n        { this.state.section === \"chart\" &&\r\n          <Chart style={pageBg} tasks={this.state.tasks} entries={this.state.entries} updateTasks={this.updateTasks} />\r\n        }\r\n        { this.state.section === \"settings\" &&\r\n          <Settings style={pageBg} tasks={this.state.tasks} />\r\n        }\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst pageBg = {\r\n  backgroundColor: \"lightgrey\",\r\n  height: \"100vh\",\r\n  padding: \"20px\",\r\n  paddingTop: \"76px\"\r\n};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceworker';\r\n//import 'bootstrap/dist/css/bootstrap.min.css'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById(\"react-app\")\r\n );\r\n\r\n // If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}